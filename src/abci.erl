%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.8
-module(abci).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_MessageType/1, enum_value_by_symbol_MessageType/1]).
-export([enum_symbol_by_value_CodeType/1, enum_value_by_symbol_CodeType/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include_lib("include/abci.hrl").
-include_lib("gpb/include/gpb.hrl").

%% enumerated types
-type 'MessageType'() :: 'NullMessage' | 'Echo' | 'Flush' | 'Info' | 'SetOption' | 'Exception' | 'DeliverTx' | 'CheckTx' | 'Commit' | 'Query' | 'InitChain' | 'BeginBlock' | 'EndBlock'.
-type 'CodeType'() :: 'OK' | 'InternalError' | 'EncodingError' | 'BadNonce' | 'Unauthorized' | 'InsufficientFunds' | 'UnknownRequest' | 'BaseDuplicateAddress' | 'BaseEncodingError' | 'BaseInsufficientFees' | 'BaseInsufficientFunds' | 'BaseInsufficientGasPrice' | 'BaseInvalidInput' | 'BaseInvalidOutput' | 'BaseInvalidPubKey' | 'BaseInvalidSequence' | 'BaseInvalidSignature' | 'BaseUnknownAddress' | 'BaseUnknownPubKey' | 'BaseUnknownPlugin' | 'GovUnknownEntity' | 'GovUnknownGroup' | 'GovUnknownProposal' | 'GovDuplicateGroup' | 'GovDuplicateMember' | 'GovDuplicateProposal' | 'GovDuplicateVote' | 'GovInvalidMember' | 'GovInvalidVote' | 'GovInvalidVotingPower'.
-export_type(['MessageType'/0, 'CodeType'/0]).

%% message types
-type 'RequestInfo'() :: #'RequestInfo'{}.
-type 'ResponseInitChain'() :: #'ResponseInitChain'{}.
-type 'PartSetHeader'() :: #'PartSetHeader'{}.
-type 'BlockID'() :: #'BlockID'{}.
-type 'Header'() :: #'Header'{}.
-type 'RequestBeginBlock'() :: #'RequestBeginBlock'{}.
-type 'Validator'() :: #'Validator'{}.
-type 'ResponseEndBlock'() :: #'ResponseEndBlock'{}.
-type 'RequestDeliverTx'() :: #'RequestDeliverTx'{}.
-type 'RequestCheckTx'() :: #'RequestCheckTx'{}.
-type 'RequestCommit'() :: #'RequestCommit'{}.
-type 'RequestEndBlock'() :: #'RequestEndBlock'{}.
-type 'RequestInitChain'() :: #'RequestInitChain'{}.
-type 'RequestQuery'() :: #'RequestQuery'{}.
-type 'RequestSetOption'() :: #'RequestSetOption'{}.
-type 'RequestFlush'() :: #'RequestFlush'{}.
-type 'RequestEcho'() :: #'RequestEcho'{}.
-type 'Request'() :: #'Request'{}.
-type 'ResponseInfo'() :: #'ResponseInfo'{}.
-type 'ResponseSetOption'() :: #'ResponseSetOption'{}.
-type 'ResponseCheckTx'() :: #'ResponseCheckTx'{}.
-type 'ResponseDeliverTx'() :: #'ResponseDeliverTx'{}.
-type 'ResponseBeginBlock'() :: #'ResponseBeginBlock'{}.
-type 'ResponseQuery'() :: #'ResponseQuery'{}.
-type 'ResponseFlush'() :: #'ResponseFlush'{}.
-type 'ResponseCommit'() :: #'ResponseCommit'{}.
-type 'ResponseEcho'() :: #'ResponseEcho'{}.
-type 'ResponseException'() :: #'ResponseException'{}.
-type 'Response'() :: #'Response'{}.
-export_type(['RequestInfo'/0, 'ResponseInitChain'/0, 'PartSetHeader'/0, 'BlockID'/0, 'Header'/0, 'RequestBeginBlock'/0, 'Validator'/0, 'ResponseEndBlock'/0, 'RequestDeliverTx'/0, 'RequestCheckTx'/0, 'RequestCommit'/0, 'RequestEndBlock'/0, 'RequestInitChain'/0, 'RequestQuery'/0, 'RequestSetOption'/0, 'RequestFlush'/0, 'RequestEcho'/0, 'Request'/0, 'ResponseInfo'/0, 'ResponseSetOption'/0, 'ResponseCheckTx'/0, 'ResponseDeliverTx'/0, 'ResponseBeginBlock'/0, 'ResponseQuery'/0, 'ResponseFlush'/0, 'ResponseCommit'/0, 'ResponseEcho'/0, 'ResponseException'/0, 'Response'/0]).


-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'RequestInfo'{} -> e_msg_RequestInfo(Msg, TrUserData);
      #'ResponseInitChain'{} ->
	  e_msg_ResponseInitChain(Msg, TrUserData);
      #'PartSetHeader'{} ->
	  e_msg_PartSetHeader(Msg, TrUserData);
      #'BlockID'{} -> e_msg_BlockID(Msg, TrUserData);
      #'Header'{} -> e_msg_Header(Msg, TrUserData);
      #'RequestBeginBlock'{} ->
	  e_msg_RequestBeginBlock(Msg, TrUserData);
      #'Validator'{} -> e_msg_Validator(Msg, TrUserData);
      #'ResponseEndBlock'{} ->
	  e_msg_ResponseEndBlock(Msg, TrUserData);
      #'RequestDeliverTx'{} ->
	  e_msg_RequestDeliverTx(Msg, TrUserData);
      #'RequestCheckTx'{} ->
	  e_msg_RequestCheckTx(Msg, TrUserData);
      #'RequestCommit'{} ->
	  e_msg_RequestCommit(Msg, TrUserData);
      #'RequestEndBlock'{} ->
	  e_msg_RequestEndBlock(Msg, TrUserData);
      #'RequestInitChain'{} ->
	  e_msg_RequestInitChain(Msg, TrUserData);
      #'RequestQuery'{} ->
	  e_msg_RequestQuery(Msg, TrUserData);
      #'RequestSetOption'{} ->
	  e_msg_RequestSetOption(Msg, TrUserData);
      #'RequestFlush'{} ->
	  e_msg_RequestFlush(Msg, TrUserData);
      #'RequestEcho'{} -> e_msg_RequestEcho(Msg, TrUserData);
      #'Request'{} -> e_msg_Request(Msg, TrUserData);
      #'ResponseInfo'{} ->
	  e_msg_ResponseInfo(Msg, TrUserData);
      #'ResponseSetOption'{} ->
	  e_msg_ResponseSetOption(Msg, TrUserData);
      #'ResponseCheckTx'{} ->
	  e_msg_ResponseCheckTx(Msg, TrUserData);
      #'ResponseDeliverTx'{} ->
	  e_msg_ResponseDeliverTx(Msg, TrUserData);
      #'ResponseBeginBlock'{} ->
	  e_msg_ResponseBeginBlock(Msg, TrUserData);
      #'ResponseQuery'{} ->
	  e_msg_ResponseQuery(Msg, TrUserData);
      #'ResponseFlush'{} ->
	  e_msg_ResponseFlush(Msg, TrUserData);
      #'ResponseCommit'{} ->
	  e_msg_ResponseCommit(Msg, TrUserData);
      #'ResponseEcho'{} ->
	  e_msg_ResponseEcho(Msg, TrUserData);
      #'ResponseException'{} ->
	  e_msg_ResponseException(Msg, TrUserData);
      #'Response'{} -> e_msg_Response(Msg, TrUserData)
    end.



e_msg_RequestInfo(_Msg, _TrUserData) -> <<>>.

e_msg_ResponseInitChain(_Msg, _TrUserData) -> <<>>.

e_msg_PartSetHeader(Msg, TrUserData) ->
    e_msg_PartSetHeader(Msg, <<>>, TrUserData).


e_msg_PartSetHeader(#'PartSetHeader'{total = F1,
				     hash = F2},
		    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= <<>> -> B1;
		true -> e_type_bytes(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_BlockID(Msg, TrUserData) ->
    e_msg_BlockID(Msg, <<>>, TrUserData).


e_msg_BlockID(#'BlockID'{hash = F1, parts = F2}, Bin,
	      TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= <<>> -> Bin;
		     true -> e_type_bytes(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    e_mfield_BlockID_parts(TrF2, <<B1/binary, 18>>,
					   TrUserData)
	     end
	   end
    end.

e_msg_Header(Msg, TrUserData) ->
    e_msg_Header(Msg, <<>>, TrUserData).


e_msg_Header(#'Header'{chain_id = F1, height = F2,
		       time = F3, num_txs = F4, last_block_id = F5,
		       last_commit_hash = F6, data_hash = F7,
		       validators_hash = F8, app_hash = F9},
	     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case iolist_size(TrF1) of
		    0 -> Bin;
		    _ -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true -> e_varint(TrF4, <<B3/binary, 32>>)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= undefined -> B4;
		     true ->
			 e_mfield_Header_last_block_id(TrF5, <<B4/binary, 42>>,
						       TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= <<>> -> B5;
		     true -> e_type_bytes(TrF6, <<B5/binary, 50>>)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= <<>> -> B6;
		     true -> e_type_bytes(TrF7, <<B6/binary, 58>>)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= <<>> -> B7;
		     true -> e_type_bytes(TrF8, <<B7/binary, 66>>)
		  end
		end
	 end,
    if F9 == undefined -> B8;
       true ->
	   begin
	     TrF9 = id(F9, TrUserData),
	     if TrF9 =:= <<>> -> B8;
		true -> e_type_bytes(TrF9, <<B8/binary, 74>>)
	     end
	   end
    end.

e_msg_RequestBeginBlock(Msg, TrUserData) ->
    e_msg_RequestBeginBlock(Msg, <<>>, TrUserData).


e_msg_RequestBeginBlock(#'RequestBeginBlock'{hash = F1,
					     header = F2},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= <<>> -> Bin;
		     true -> e_type_bytes(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    e_mfield_RequestBeginBlock_header(TrF2,
						      <<B1/binary, 18>>,
						      TrUserData)
	     end
	   end
    end.

e_msg_Validator(Msg, TrUserData) ->
    e_msg_Validator(Msg, <<>>, TrUserData).


e_msg_Validator(#'Validator'{pubKey = F1, power = F2},
		Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= <<>> -> Bin;
		     true -> e_type_bytes(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_varint(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_ResponseEndBlock(Msg, TrUserData) ->
    e_msg_ResponseEndBlock(Msg, <<>>, TrUserData).


e_msg_ResponseEndBlock(#'ResponseEndBlock'{diffs = F1},
		       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_ResponseEndBlock_diffs(TrF1, Bin, TrUserData)
      end
    end.

e_msg_RequestDeliverTx(Msg, TrUserData) ->
    e_msg_RequestDeliverTx(Msg, <<>>, TrUserData).


e_msg_RequestDeliverTx(#'RequestDeliverTx'{tx = F1},
		       Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= <<>> -> Bin;
		true -> e_type_bytes(TrF1, <<Bin/binary, 10>>)
	     end
	   end
    end.

e_msg_RequestCheckTx(Msg, TrUserData) ->
    e_msg_RequestCheckTx(Msg, <<>>, TrUserData).


e_msg_RequestCheckTx(#'RequestCheckTx'{tx = F1}, Bin,
		     TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= <<>> -> Bin;
		true -> e_type_bytes(TrF1, <<Bin/binary, 10>>)
	     end
	   end
    end.

e_msg_RequestCommit(_Msg, _TrUserData) -> <<>>.

e_msg_RequestEndBlock(Msg, TrUserData) ->
    e_msg_RequestEndBlock(Msg, <<>>, TrUserData).


e_msg_RequestEndBlock(#'RequestEndBlock'{height = F1},
		      Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>)
	     end
	   end
    end.

e_msg_RequestInitChain(Msg, TrUserData) ->
    e_msg_RequestInitChain(Msg, <<>>, TrUserData).


e_msg_RequestInitChain(#'RequestInitChain'{validators =
					       F1},
		       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_RequestInitChain_validators(TrF1, Bin,
						 TrUserData)
      end
    end.

e_msg_RequestQuery(Msg, TrUserData) ->
    e_msg_RequestQuery(Msg, <<>>, TrUserData).


e_msg_RequestQuery(#'RequestQuery'{data = F1, path = F2,
				   height = F3, prove = F4},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= <<>> -> Bin;
		     true -> e_type_bytes(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case iolist_size(TrF2) of
		    0 -> B1;
		    _ -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= false -> B3;
		true -> e_type_bool(TrF4, <<B3/binary, 32>>)
	     end
	   end
    end.

e_msg_RequestSetOption(Msg, TrUserData) ->
    e_msg_RequestSetOption(Msg, <<>>, TrUserData).


e_msg_RequestSetOption(#'RequestSetOption'{key = F1,
					   value = F2},
		       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case iolist_size(TrF1) of
		    0 -> Bin;
		    _ -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case iolist_size(TrF2) of
	       0 -> B1;
	       _ -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_RequestFlush(_Msg, _TrUserData) -> <<>>.

e_msg_RequestEcho(Msg, TrUserData) ->
    e_msg_RequestEcho(Msg, <<>>, TrUserData).


e_msg_RequestEcho(#'RequestEcho'{message = F1}, Bin,
		  TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case iolist_size(TrF1) of
	       0 -> Bin;
	       _ -> e_type_string(TrF1, <<Bin/binary, 10>>)
	     end
	   end
    end.

e_msg_Request(Msg, TrUserData) ->
    e_msg_Request(Msg, <<>>, TrUserData).


e_msg_Request(#'Request'{value = F1}, Bin,
	      TrUserData) ->
    case F1 of
      undefined -> Bin;
      {echo, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_Request_echo(TrOF1, <<Bin/binary, 10>>,
				  TrUserData)
	  end;
      {flush, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_Request_flush(TrOF1, <<Bin/binary, 18>>,
				   TrUserData)
	  end;
      {info, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_Request_info(TrOF1, <<Bin/binary, 26>>,
				  TrUserData)
	  end;
      {set_option, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_Request_set_option(TrOF1, <<Bin/binary, 34>>,
					TrUserData)
	  end;
      {deliver_tx, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_Request_deliver_tx(TrOF1, <<Bin/binary, 42>>,
					TrUserData)
	  end;
      {check_tx, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_Request_check_tx(TrOF1, <<Bin/binary, 50>>,
				      TrUserData)
	  end;
      {commit, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_Request_commit(TrOF1, <<Bin/binary, 58>>,
				    TrUserData)
	  end;
      {query, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_Request_query(TrOF1, <<Bin/binary, 66>>,
				   TrUserData)
	  end;
      {init_chain, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_Request_init_chain(TrOF1, <<Bin/binary, 74>>,
					TrUserData)
	  end;
      {begin_block, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_Request_begin_block(TrOF1, <<Bin/binary, 82>>,
					 TrUserData)
	  end;
      {end_block, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_Request_end_block(TrOF1, <<Bin/binary, 90>>,
				       TrUserData)
	  end
    end.

e_msg_ResponseInfo(Msg, TrUserData) ->
    e_msg_ResponseInfo(Msg, <<>>, TrUserData).


e_msg_ResponseInfo(#'ResponseInfo'{data = F1,
				   version = F2, last_block_height = F3,
				   last_block_app_hash = F4},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case iolist_size(TrF1) of
		    0 -> Bin;
		    _ -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case iolist_size(TrF2) of
		    0 -> B1;
		    _ -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= <<>> -> B3;
		true -> e_type_bytes(TrF4, <<B3/binary, 34>>)
	     end
	   end
    end.

e_msg_ResponseSetOption(Msg, TrUserData) ->
    e_msg_ResponseSetOption(Msg, <<>>, TrUserData).


e_msg_ResponseSetOption(#'ResponseSetOption'{log = F1},
			Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case iolist_size(TrF1) of
	       0 -> Bin;
	       _ -> e_type_string(TrF1, <<Bin/binary, 10>>)
	     end
	   end
    end.

e_msg_ResponseCheckTx(Msg, TrUserData) ->
    e_msg_ResponseCheckTx(Msg, <<>>, TrUserData).


e_msg_ResponseCheckTx(#'ResponseCheckTx'{code = F1,
					 data = F2, log = F3},
		      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'OK' -> Bin;
		     true -> e_enum_CodeType(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= <<>> -> B1;
		     true -> e_type_bytes(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case iolist_size(TrF3) of
	       0 -> B2;
	       _ -> e_type_string(TrF3, <<B2/binary, 26>>)
	     end
	   end
    end.

e_msg_ResponseDeliverTx(Msg, TrUserData) ->
    e_msg_ResponseDeliverTx(Msg, <<>>, TrUserData).


e_msg_ResponseDeliverTx(#'ResponseDeliverTx'{code = F1,
					     data = F2, log = F3},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'OK' -> Bin;
		     true -> e_enum_CodeType(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= <<>> -> B1;
		     true -> e_type_bytes(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case iolist_size(TrF3) of
	       0 -> B2;
	       _ -> e_type_string(TrF3, <<B2/binary, 26>>)
	     end
	   end
    end.

e_msg_ResponseBeginBlock(_Msg, _TrUserData) -> <<>>.

e_msg_ResponseQuery(Msg, TrUserData) ->
    e_msg_ResponseQuery(Msg, <<>>, TrUserData).


e_msg_ResponseQuery(#'ResponseQuery'{code = F1,
				     index = F2, key = F3, value = F4,
				     proof = F5, height = F6, log = F7},
		    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'OK' -> Bin;
		     true -> e_enum_CodeType(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_type_int64(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= <<>> -> B2;
		     true -> e_type_bytes(TrF3, <<B2/binary, 26>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= <<>> -> B3;
		     true -> e_type_bytes(TrF4, <<B3/binary, 34>>)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= <<>> -> B4;
		     true -> e_type_bytes(TrF5, <<B4/binary, 42>>)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 0 -> B5;
		     true -> e_varint(TrF6, <<B5/binary, 48>>)
		  end
		end
	 end,
    if F7 == undefined -> B6;
       true ->
	   begin
	     TrF7 = id(F7, TrUserData),
	     case iolist_size(TrF7) of
	       0 -> B6;
	       _ -> e_type_string(TrF7, <<B6/binary, 58>>)
	     end
	   end
    end.

e_msg_ResponseFlush(_Msg, _TrUserData) -> <<>>.

e_msg_ResponseCommit(Msg, TrUserData) ->
    e_msg_ResponseCommit(Msg, <<>>, TrUserData).


e_msg_ResponseCommit(#'ResponseCommit'{code = F1,
				       data = F2, log = F3},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'OK' -> Bin;
		     true -> e_enum_CodeType(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= <<>> -> B1;
		     true -> e_type_bytes(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case iolist_size(TrF3) of
	       0 -> B2;
	       _ -> e_type_string(TrF3, <<B2/binary, 26>>)
	     end
	   end
    end.

e_msg_ResponseEcho(Msg, TrUserData) ->
    e_msg_ResponseEcho(Msg, <<>>, TrUserData).


e_msg_ResponseEcho(#'ResponseEcho'{message = F1}, Bin,
		   TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case iolist_size(TrF1) of
	       0 -> Bin;
	       _ -> e_type_string(TrF1, <<Bin/binary, 10>>)
	     end
	   end
    end.

e_msg_ResponseException(Msg, TrUserData) ->
    e_msg_ResponseException(Msg, <<>>, TrUserData).


e_msg_ResponseException(#'ResponseException'{error =
						 F1},
			Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case iolist_size(TrF1) of
	       0 -> Bin;
	       _ -> e_type_string(TrF1, <<Bin/binary, 10>>)
	     end
	   end
    end.

e_msg_Response(Msg, TrUserData) ->
    e_msg_Response(Msg, <<>>, TrUserData).


e_msg_Response(#'Response'{value = F1}, Bin,
	       TrUserData) ->
    case F1 of
      undefined -> Bin;
      {exception, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_Response_exception(TrOF1, <<Bin/binary, 10>>,
					TrUserData)
	  end;
      {echo, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_Response_echo(TrOF1, <<Bin/binary, 18>>,
				   TrUserData)
	  end;
      {flush, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_Response_flush(TrOF1, <<Bin/binary, 26>>,
				    TrUserData)
	  end;
      {info, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_Response_info(TrOF1, <<Bin/binary, 34>>,
				   TrUserData)
	  end;
      {set_option, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_Response_set_option(TrOF1, <<Bin/binary, 42>>,
					 TrUserData)
	  end;
      {deliver_tx, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_Response_deliver_tx(TrOF1, <<Bin/binary, 50>>,
					 TrUserData)
	  end;
      {check_tx, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_Response_check_tx(TrOF1, <<Bin/binary, 58>>,
				       TrUserData)
	  end;
      {commit, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_Response_commit(TrOF1, <<Bin/binary, 66>>,
				     TrUserData)
	  end;
      {query, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_Response_query(TrOF1, <<Bin/binary, 74>>,
				    TrUserData)
	  end;
      {init_chain, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_Response_init_chain(TrOF1, <<Bin/binary, 82>>,
					 TrUserData)
	  end;
      {begin_block, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_Response_begin_block(TrOF1, <<Bin/binary, 90>>,
					  TrUserData)
	  end;
      {end_block, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_Response_end_block(TrOF1, <<Bin/binary, 98>>,
					TrUserData)
	  end
    end.

e_mfield_BlockID_parts(Msg, Bin, TrUserData) ->
    SubBin = e_msg_PartSetHeader(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Header_last_block_id(Msg, Bin, TrUserData) ->
    SubBin = e_msg_BlockID(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_RequestBeginBlock_header(Msg, Bin,
				  TrUserData) ->
    SubBin = e_msg_Header(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ResponseEndBlock_diffs(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Validator(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ResponseEndBlock_diffs([Elem | Rest], Bin,
			       TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_ResponseEndBlock_diffs(id(Elem,
					      TrUserData),
					   Bin2, TrUserData),
    e_field_ResponseEndBlock_diffs(Rest, Bin3, TrUserData);
e_field_ResponseEndBlock_diffs([], Bin, _TrUserData) ->
    Bin.

e_mfield_RequestInitChain_validators(Msg, Bin,
				     TrUserData) ->
    SubBin = e_msg_Validator(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_RequestInitChain_validators([Elem | Rest], Bin,
				    TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_RequestInitChain_validators(id(Elem,
						   TrUserData),
						Bin2, TrUserData),
    e_field_RequestInitChain_validators(Rest, Bin3,
					TrUserData);
e_field_RequestInitChain_validators([], Bin,
				    _TrUserData) ->
    Bin.

e_mfield_Request_echo(Msg, Bin, TrUserData) ->
    SubBin = e_msg_RequestEcho(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Request_flush(_Msg, Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

e_mfield_Request_info(_Msg, Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

e_mfield_Request_set_option(Msg, Bin, TrUserData) ->
    SubBin = e_msg_RequestSetOption(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Request_deliver_tx(Msg, Bin, TrUserData) ->
    SubBin = e_msg_RequestDeliverTx(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Request_check_tx(Msg, Bin, TrUserData) ->
    SubBin = e_msg_RequestCheckTx(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Request_commit(_Msg, Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

e_mfield_Request_query(Msg, Bin, TrUserData) ->
    SubBin = e_msg_RequestQuery(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Request_init_chain(Msg, Bin, TrUserData) ->
    SubBin = e_msg_RequestInitChain(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Request_begin_block(Msg, Bin, TrUserData) ->
    SubBin = e_msg_RequestBeginBlock(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Request_end_block(Msg, Bin, TrUserData) ->
    SubBin = e_msg_RequestEndBlock(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_exception(Msg, Bin, TrUserData) ->
    SubBin = e_msg_ResponseException(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_echo(Msg, Bin, TrUserData) ->
    SubBin = e_msg_ResponseEcho(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_flush(_Msg, Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

e_mfield_Response_info(Msg, Bin, TrUserData) ->
    SubBin = e_msg_ResponseInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_set_option(Msg, Bin, TrUserData) ->
    SubBin = e_msg_ResponseSetOption(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_deliver_tx(Msg, Bin, TrUserData) ->
    SubBin = e_msg_ResponseDeliverTx(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_check_tx(Msg, Bin, TrUserData) ->
    SubBin = e_msg_ResponseCheckTx(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_commit(Msg, Bin, TrUserData) ->
    SubBin = e_msg_ResponseCommit(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_query(Msg, Bin, TrUserData) ->
    SubBin = e_msg_ResponseQuery(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_init_chain(_Msg, Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

e_mfield_Response_begin_block(_Msg, Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

e_mfield_Response_end_block(Msg, Bin, TrUserData) ->
    SubBin = e_msg_ResponseEndBlock(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.



e_enum_CodeType('OK', Bin) -> <<Bin/binary, 0>>;
e_enum_CodeType('InternalError', Bin) ->
    <<Bin/binary, 1>>;
e_enum_CodeType('EncodingError', Bin) ->
    <<Bin/binary, 2>>;
e_enum_CodeType('BadNonce', Bin) -> <<Bin/binary, 3>>;
e_enum_CodeType('Unauthorized', Bin) ->
    <<Bin/binary, 4>>;
e_enum_CodeType('InsufficientFunds', Bin) ->
    <<Bin/binary, 5>>;
e_enum_CodeType('UnknownRequest', Bin) ->
    <<Bin/binary, 6>>;
e_enum_CodeType('BaseDuplicateAddress', Bin) ->
    <<Bin/binary, 101>>;
e_enum_CodeType('BaseEncodingError', Bin) ->
    <<Bin/binary, 102>>;
e_enum_CodeType('BaseInsufficientFees', Bin) ->
    <<Bin/binary, 103>>;
e_enum_CodeType('BaseInsufficientFunds', Bin) ->
    <<Bin/binary, 104>>;
e_enum_CodeType('BaseInsufficientGasPrice', Bin) ->
    <<Bin/binary, 105>>;
e_enum_CodeType('BaseInvalidInput', Bin) ->
    <<Bin/binary, 106>>;
e_enum_CodeType('BaseInvalidOutput', Bin) ->
    <<Bin/binary, 107>>;
e_enum_CodeType('BaseInvalidPubKey', Bin) ->
    <<Bin/binary, 108>>;
e_enum_CodeType('BaseInvalidSequence', Bin) ->
    <<Bin/binary, 109>>;
e_enum_CodeType('BaseInvalidSignature', Bin) ->
    <<Bin/binary, 110>>;
e_enum_CodeType('BaseUnknownAddress', Bin) ->
    <<Bin/binary, 111>>;
e_enum_CodeType('BaseUnknownPubKey', Bin) ->
    <<Bin/binary, 112>>;
e_enum_CodeType('BaseUnknownPlugin', Bin) ->
    <<Bin/binary, 113>>;
e_enum_CodeType('GovUnknownEntity', Bin) ->
    <<Bin/binary, 201, 1>>;
e_enum_CodeType('GovUnknownGroup', Bin) ->
    <<Bin/binary, 202, 1>>;
e_enum_CodeType('GovUnknownProposal', Bin) ->
    <<Bin/binary, 203, 1>>;
e_enum_CodeType('GovDuplicateGroup', Bin) ->
    <<Bin/binary, 204, 1>>;
e_enum_CodeType('GovDuplicateMember', Bin) ->
    <<Bin/binary, 205, 1>>;
e_enum_CodeType('GovDuplicateProposal', Bin) ->
    <<Bin/binary, 206, 1>>;
e_enum_CodeType('GovDuplicateVote', Bin) ->
    <<Bin/binary, 207, 1>>;
e_enum_CodeType('GovInvalidMember', Bin) ->
    <<Bin/binary, 208, 1>>;
e_enum_CodeType('GovInvalidVote', Bin) ->
    <<Bin/binary, 209, 1>>;
e_enum_CodeType('GovInvalidVotingPower', Bin) ->
    <<Bin/binary, 210, 1>>;
e_enum_CodeType(V, Bin) -> e_varint(V, Bin).

e_type_int64(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin) -> <<Bin/binary, 0>>.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'RequestInfo' -> d_msg_RequestInfo(Bin, TrUserData);
      'ResponseInitChain' ->
	  d_msg_ResponseInitChain(Bin, TrUserData);
      'PartSetHeader' -> d_msg_PartSetHeader(Bin, TrUserData);
      'BlockID' -> d_msg_BlockID(Bin, TrUserData);
      'Header' -> d_msg_Header(Bin, TrUserData);
      'RequestBeginBlock' ->
	  d_msg_RequestBeginBlock(Bin, TrUserData);
      'Validator' -> d_msg_Validator(Bin, TrUserData);
      'ResponseEndBlock' ->
	  d_msg_ResponseEndBlock(Bin, TrUserData);
      'RequestDeliverTx' ->
	  d_msg_RequestDeliverTx(Bin, TrUserData);
      'RequestCheckTx' ->
	  d_msg_RequestCheckTx(Bin, TrUserData);
      'RequestCommit' -> d_msg_RequestCommit(Bin, TrUserData);
      'RequestEndBlock' ->
	  d_msg_RequestEndBlock(Bin, TrUserData);
      'RequestInitChain' ->
	  d_msg_RequestInitChain(Bin, TrUserData);
      'RequestQuery' -> d_msg_RequestQuery(Bin, TrUserData);
      'RequestSetOption' ->
	  d_msg_RequestSetOption(Bin, TrUserData);
      'RequestFlush' -> d_msg_RequestFlush(Bin, TrUserData);
      'RequestEcho' -> d_msg_RequestEcho(Bin, TrUserData);
      'Request' -> d_msg_Request(Bin, TrUserData);
      'ResponseInfo' -> d_msg_ResponseInfo(Bin, TrUserData);
      'ResponseSetOption' ->
	  d_msg_ResponseSetOption(Bin, TrUserData);
      'ResponseCheckTx' ->
	  d_msg_ResponseCheckTx(Bin, TrUserData);
      'ResponseDeliverTx' ->
	  d_msg_ResponseDeliverTx(Bin, TrUserData);
      'ResponseBeginBlock' ->
	  d_msg_ResponseBeginBlock(Bin, TrUserData);
      'ResponseQuery' -> d_msg_ResponseQuery(Bin, TrUserData);
      'ResponseFlush' -> d_msg_ResponseFlush(Bin, TrUserData);
      'ResponseCommit' ->
	  d_msg_ResponseCommit(Bin, TrUserData);
      'ResponseEcho' -> d_msg_ResponseEcho(Bin, TrUserData);
      'ResponseException' ->
	  d_msg_ResponseException(Bin, TrUserData);
      'Response' -> d_msg_Response(Bin, TrUserData)
    end.



d_msg_RequestInfo(Bin, TrUserData) ->
    dfp_read_field_def_RequestInfo(Bin, 0, 0, TrUserData).

dfp_read_field_def_RequestInfo(<<>>, 0, 0, _) ->
    #'RequestInfo'{};
dfp_read_field_def_RequestInfo(Other, Z1, Z2,
			       TrUserData) ->
    dg_read_field_def_RequestInfo(Other, Z1, Z2,
				  TrUserData).

dg_read_field_def_RequestInfo(<<1:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RequestInfo(Rest, N + 7,
				  X bsl N + Acc, TrUserData);
dg_read_field_def_RequestInfo(<<0:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_RequestInfo(Rest, 0, 0, TrUserData);
      1 -> skip_64_RequestInfo(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_RequestInfo(Rest, 0, 0,
					    TrUserData);
      5 -> skip_32_RequestInfo(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_RequestInfo(<<>>, 0, 0, _) ->
    #'RequestInfo'{}.

skip_varint_RequestInfo(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    skip_varint_RequestInfo(Rest, Z1, Z2, TrUserData);
skip_varint_RequestInfo(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    dfp_read_field_def_RequestInfo(Rest, Z1, Z2,
				   TrUserData).


skip_length_delimited_RequestInfo(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_RequestInfo(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
skip_length_delimited_RequestInfo(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RequestInfo(Rest2, 0, 0, TrUserData).


skip_32_RequestInfo(<<_:32, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_RequestInfo(Rest, Z1, Z2,
				   TrUserData).


skip_64_RequestInfo(<<_:64, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_RequestInfo(Rest, Z1, Z2,
				   TrUserData).


d_msg_ResponseInitChain(Bin, TrUserData) ->
    dfp_read_field_def_ResponseInitChain(Bin, 0, 0,
					 TrUserData).

dfp_read_field_def_ResponseInitChain(<<>>, 0, 0, _) ->
    #'ResponseInitChain'{};
dfp_read_field_def_ResponseInitChain(Other, Z1, Z2,
				     TrUserData) ->
    dg_read_field_def_ResponseInitChain(Other, Z1, Z2,
					TrUserData).

dg_read_field_def_ResponseInitChain(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ResponseInitChain(Rest, N + 7,
					X bsl N + Acc, TrUserData);
dg_read_field_def_ResponseInitChain(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_ResponseInitChain(Rest, 0, 0, TrUserData);
      1 -> skip_64_ResponseInitChain(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_ResponseInitChain(Rest, 0, 0,
						  TrUserData);
      5 -> skip_32_ResponseInitChain(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_ResponseInitChain(<<>>, 0, 0, _) ->
    #'ResponseInitChain'{}.

skip_varint_ResponseInitChain(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    skip_varint_ResponseInitChain(Rest, Z1, Z2, TrUserData);
skip_varint_ResponseInitChain(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    dfp_read_field_def_ResponseInitChain(Rest, Z1, Z2,
					 TrUserData).


skip_length_delimited_ResponseInitChain(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_ResponseInitChain(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
skip_length_delimited_ResponseInitChain(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResponseInitChain(Rest2, 0, 0,
					 TrUserData).


skip_32_ResponseInitChain(<<_:32, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_ResponseInitChain(Rest, Z1, Z2,
					 TrUserData).


skip_64_ResponseInitChain(<<_:64, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_ResponseInitChain(Rest, Z1, Z2,
					 TrUserData).


d_msg_PartSetHeader(Bin, TrUserData) ->
    dfp_read_field_def_PartSetHeader(Bin, 0, 0,
				     id(0, TrUserData), id(<<>>, TrUserData),
				     TrUserData).

dfp_read_field_def_PartSetHeader(<<8, Rest/binary>>, Z1,
				 Z2, F1, F2, TrUserData) ->
    d_field_PartSetHeader_total(Rest, Z1, Z2, F1, F2,
				TrUserData);
dfp_read_field_def_PartSetHeader(<<18, Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    d_field_PartSetHeader_hash(Rest, Z1, Z2, F1, F2,
			       TrUserData);
dfp_read_field_def_PartSetHeader(<<>>, 0, 0, F1, F2,
				 _) ->
    #'PartSetHeader'{total = F1, hash = F2};
dfp_read_field_def_PartSetHeader(Other, Z1, Z2, F1, F2,
				 TrUserData) ->
    dg_read_field_def_PartSetHeader(Other, Z1, Z2, F1, F2,
				    TrUserData).

dg_read_field_def_PartSetHeader(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PartSetHeader(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_PartSetHeader(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_PartSetHeader_total(Rest, 0, 0, F1, F2,
				      TrUserData);
      18 ->
	  d_field_PartSetHeader_hash(Rest, 0, 0, F1, F2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_PartSetHeader(Rest, 0, 0, F1, F2,
					  TrUserData);
	    1 ->
		skip_64_PartSetHeader(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_PartSetHeader(Rest, 0, 0, F1, F2,
						    TrUserData);
	    5 ->
		skip_32_PartSetHeader(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_PartSetHeader(<<>>, 0, 0, F1, F2,
				_) ->
    #'PartSetHeader'{total = F1, hash = F2}.

d_field_PartSetHeader_total(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_PartSetHeader_total(Rest, N + 7, X bsl N + Acc,
				F1, F2, TrUserData);
d_field_PartSetHeader_total(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PartSetHeader(Rest, 0, 0, NewFValue,
				     F2, TrUserData).


d_field_PartSetHeader_hash(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_PartSetHeader_hash(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
d_field_PartSetHeader_hash(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_PartSetHeader(Rest2, 0, 0, F1,
				     NewFValue, TrUserData).


skip_varint_PartSetHeader(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, TrUserData) ->
    skip_varint_PartSetHeader(Rest, Z1, Z2, F1, F2,
			      TrUserData);
skip_varint_PartSetHeader(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_PartSetHeader(Rest, Z1, Z2, F1, F2,
				     TrUserData).


skip_length_delimited_PartSetHeader(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_PartSetHeader(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_PartSetHeader(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PartSetHeader(Rest2, 0, 0, F1, F2,
				     TrUserData).


skip_32_PartSetHeader(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, TrUserData) ->
    dfp_read_field_def_PartSetHeader(Rest, Z1, Z2, F1, F2,
				     TrUserData).


skip_64_PartSetHeader(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, TrUserData) ->
    dfp_read_field_def_PartSetHeader(Rest, Z1, Z2, F1, F2,
				     TrUserData).


d_msg_BlockID(Bin, TrUserData) ->
    dfp_read_field_def_BlockID(Bin, 0, 0,
			       id(<<>>, TrUserData), id(undefined, TrUserData),
			       TrUserData).

dfp_read_field_def_BlockID(<<10, Rest/binary>>, Z1, Z2,
			   F1, F2, TrUserData) ->
    d_field_BlockID_hash(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_BlockID(<<18, Rest/binary>>, Z1, Z2,
			   F1, F2, TrUserData) ->
    d_field_BlockID_parts(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_BlockID(<<>>, 0, 0, F1, F2, _) ->
    #'BlockID'{hash = F1, parts = F2};
dfp_read_field_def_BlockID(Other, Z1, Z2, F1, F2,
			   TrUserData) ->
    dg_read_field_def_BlockID(Other, Z1, Z2, F1, F2,
			      TrUserData).

dg_read_field_def_BlockID(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_BlockID(Rest, N + 7, X bsl N + Acc,
			      F1, F2, TrUserData);
dg_read_field_def_BlockID(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_BlockID_hash(Rest, 0, 0, F1, F2, TrUserData);
      18 ->
	  d_field_BlockID_parts(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_BlockID(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_BlockID(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_BlockID(Rest, 0, 0, F1, F2,
					      TrUserData);
	    5 -> skip_32_BlockID(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_BlockID(<<>>, 0, 0, F1, F2, _) ->
    #'BlockID'{hash = F1, parts = F2}.

d_field_BlockID_hash(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, TrUserData)
    when N < 57 ->
    d_field_BlockID_hash(Rest, N + 7, X bsl N + Acc, F1, F2,
			 TrUserData);
d_field_BlockID_hash(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_BlockID(Rest2, 0, 0, NewFValue, F2,
			       TrUserData).


d_field_BlockID_parts(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData)
    when N < 57 ->
    d_field_BlockID_parts(Rest, N + 7, X bsl N + Acc, F1,
			  F2, TrUserData);
d_field_BlockID_parts(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_PartSetHeader(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_BlockID(Rest2, 0, 0, F1,
			       if F2 == undefined -> NewFValue;
				  true ->
				      merge_msg_PartSetHeader(F2, NewFValue,
							      TrUserData)
			       end,
			       TrUserData).


skip_varint_BlockID(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, TrUserData) ->
    skip_varint_BlockID(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_BlockID(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, TrUserData) ->
    dfp_read_field_def_BlockID(Rest, Z1, Z2, F1, F2,
			       TrUserData).


skip_length_delimited_BlockID(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_BlockID(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_BlockID(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BlockID(Rest2, 0, 0, F1, F2,
			       TrUserData).


skip_32_BlockID(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		TrUserData) ->
    dfp_read_field_def_BlockID(Rest, Z1, Z2, F1, F2,
			       TrUserData).


skip_64_BlockID(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		TrUserData) ->
    dfp_read_field_def_BlockID(Rest, Z1, Z2, F1, F2,
			       TrUserData).


d_msg_Header(Bin, TrUserData) ->
    dfp_read_field_def_Header(Bin, 0, 0, id([], TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(undefined, TrUserData),
			      id(<<>>, TrUserData), id(<<>>, TrUserData),
			      id(<<>>, TrUserData), id(<<>>, TrUserData),
			      TrUserData).

dfp_read_field_def_Header(<<10, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_Header_chain_id(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, TrUserData);
dfp_read_field_def_Header(<<16, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_Header_height(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, F9, TrUserData);
dfp_read_field_def_Header(<<24, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_Header_time(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			F6, F7, F8, F9, TrUserData);
dfp_read_field_def_Header(<<32, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_Header_num_txs(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, TrUserData);
dfp_read_field_def_Header(<<42, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_Header_last_block_id(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, TrUserData);
dfp_read_field_def_Header(<<50, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_Header_last_commit_hash(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, TrUserData);
dfp_read_field_def_Header(<<58, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_Header_data_hash(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, TrUserData);
dfp_read_field_def_Header(<<66, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_Header_validators_hash(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, TrUserData);
dfp_read_field_def_Header(<<74, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    d_field_Header_app_hash(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, TrUserData);
dfp_read_field_def_Header(<<>>, 0, 0, F1, F2, F3, F4,
			  F5, F6, F7, F8, F9, _) ->
    #'Header'{chain_id = F1, height = F2, time = F3,
	      num_txs = F4, last_block_id = F5, last_commit_hash = F6,
	      data_hash = F7, validators_hash = F8, app_hash = F9};
dfp_read_field_def_Header(Other, Z1, Z2, F1, F2, F3, F4,
			  F5, F6, F7, F8, F9, TrUserData) ->
    dg_read_field_def_Header(Other, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, TrUserData).

dg_read_field_def_Header(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Header(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, TrUserData);
dg_read_field_def_Header(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Header_chain_id(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9, TrUserData);
      16 ->
	  d_field_Header_height(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7, F8, F9, TrUserData);
      24 ->
	  d_field_Header_time(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			      F7, F8, F9, TrUserData);
      32 ->
	  d_field_Header_num_txs(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, TrUserData);
      42 ->
	  d_field_Header_last_block_id(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, TrUserData);
      50 ->
	  d_field_Header_last_commit_hash(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, TrUserData);
      58 ->
	  d_field_Header_data_hash(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, TrUserData);
      66 ->
	  d_field_Header_validators_hash(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, TrUserData);
      74 ->
	  d_field_Header_app_hash(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Header(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				   F7, F8, F9, TrUserData);
	    1 ->
		skip_64_Header(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
			       F8, F9, TrUserData);
	    2 ->
		skip_length_delimited_Header(Rest, 0, 0, F1, F2, F3, F4,
					     F5, F6, F7, F8, F9, TrUserData);
	    5 ->
		skip_32_Header(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
			       F8, F9, TrUserData)
	  end
    end;
dg_read_field_def_Header(<<>>, 0, 0, F1, F2, F3, F4, F5,
			 F6, F7, F8, F9, _) ->
    #'Header'{chain_id = F1, height = F2, time = F3,
	      num_txs = F4, last_block_id = F5, last_commit_hash = F6,
	      data_hash = F7, validators_hash = F8, app_hash = F9}.

d_field_Header_chain_id(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData)
    when N < 57 ->
    d_field_Header_chain_id(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9, TrUserData);
d_field_Header_chain_id(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Header(Rest2, 0, 0, NewFValue, F2,
			      F3, F4, F5, F6, F7, F8, F9, TrUserData).


d_field_Header_height(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData)
    when N < 57 ->
    d_field_Header_height(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7, F8, F9, TrUserData);
d_field_Header_height(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, _, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Header(Rest, 0, 0, F1, NewFValue, F3,
			      F4, F5, F6, F7, F8, F9, TrUserData).


d_field_Header_time(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData)
    when N < 57 ->
    d_field_Header_time(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4, F5, F6, F7, F8, F9, TrUserData);
d_field_Header_time(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, _, F4, F5, F6, F7, F8, F9, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Header(Rest, 0, 0, F1, F2, NewFValue,
			      F4, F5, F6, F7, F8, F9, TrUserData).


d_field_Header_num_txs(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData)
    when N < 57 ->
    d_field_Header_num_txs(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, TrUserData);
d_field_Header_num_txs(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, _, F5, F6, F7, F8, F9, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Header(Rest, 0, 0, F1, F2, F3,
			      NewFValue, F5, F6, F7, F8, F9, TrUserData).


d_field_Header_last_block_id(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			     TrUserData)
    when N < 57 ->
    d_field_Header_last_block_id(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 TrUserData);
d_field_Header_last_block_id(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			     TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_BlockID(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Header(Rest2, 0, 0, F1, F2, F3, F4,
			      if F5 == undefined -> NewFValue;
				 true ->
				     merge_msg_BlockID(F5, NewFValue,
						       TrUserData)
			      end,
			      F6, F7, F8, F9, TrUserData).


d_field_Header_last_commit_hash(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				TrUserData)
    when N < 57 ->
    d_field_Header_last_commit_hash(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, TrUserData);
d_field_Header_last_commit_hash(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, _, F7, F8, F9,
				TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Header(Rest2, 0, 0, F1, F2, F3, F4,
			      F5, NewFValue, F7, F8, F9, TrUserData).


d_field_Header_data_hash(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData)
    when N < 57 ->
    d_field_Header_data_hash(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, TrUserData);
d_field_Header_data_hash(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, _, F8, F9, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Header(Rest2, 0, 0, F1, F2, F3, F4,
			      F5, F6, NewFValue, F8, F9, TrUserData).


d_field_Header_validators_hash(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			       TrUserData)
    when N < 57 ->
    d_field_Header_validators_hash(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, TrUserData);
d_field_Header_validators_hash(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, _, F9,
			       TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Header(Rest2, 0, 0, F1, F2, F3, F4,
			      F5, F6, F7, NewFValue, F9, TrUserData).


d_field_Header_app_hash(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData)
    when N < 57 ->
    d_field_Header_app_hash(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9, TrUserData);
d_field_Header_app_hash(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Header(Rest2, 0, 0, F1, F2, F3, F4,
			      F5, F6, F7, F8, NewFValue, TrUserData).


skip_varint_Header(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    skip_varint_Header(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		       F7, F8, F9, TrUserData);
skip_varint_Header(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, F2, F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    dfp_read_field_def_Header(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, TrUserData).


skip_length_delimited_Header(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			     TrUserData)
    when N < 57 ->
    skip_length_delimited_Header(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 TrUserData);
skip_length_delimited_Header(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Header(Rest2, 0, 0, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, TrUserData).


skip_32_Header(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
	       F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    dfp_read_field_def_Header(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, TrUserData).


skip_64_Header(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
	       F3, F4, F5, F6, F7, F8, F9, TrUserData) ->
    dfp_read_field_def_Header(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, TrUserData).


d_msg_RequestBeginBlock(Bin, TrUserData) ->
    dfp_read_field_def_RequestBeginBlock(Bin, 0, 0,
					 id(<<>>, TrUserData),
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_RequestBeginBlock(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_RequestBeginBlock_hash(Rest, Z1, Z2, F1, F2,
				   TrUserData);
dfp_read_field_def_RequestBeginBlock(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_RequestBeginBlock_header(Rest, Z1, Z2, F1, F2,
				     TrUserData);
dfp_read_field_def_RequestBeginBlock(<<>>, 0, 0, F1, F2,
				     _) ->
    #'RequestBeginBlock'{hash = F1, header = F2};
dfp_read_field_def_RequestBeginBlock(Other, Z1, Z2, F1,
				     F2, TrUserData) ->
    dg_read_field_def_RequestBeginBlock(Other, Z1, Z2, F1,
					F2, TrUserData).

dg_read_field_def_RequestBeginBlock(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RequestBeginBlock(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_RequestBeginBlock(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_RequestBeginBlock_hash(Rest, 0, 0, F1, F2,
					 TrUserData);
      18 ->
	  d_field_RequestBeginBlock_header(Rest, 0, 0, F1, F2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RequestBeginBlock(Rest, 0, 0, F1, F2,
					      TrUserData);
	    1 ->
		skip_64_RequestBeginBlock(Rest, 0, 0, F1, F2,
					  TrUserData);
	    2 ->
		skip_length_delimited_RequestBeginBlock(Rest, 0, 0, F1,
							F2, TrUserData);
	    5 ->
		skip_32_RequestBeginBlock(Rest, 0, 0, F1, F2,
					  TrUserData)
	  end
    end;
dg_read_field_def_RequestBeginBlock(<<>>, 0, 0, F1, F2,
				    _) ->
    #'RequestBeginBlock'{hash = F1, header = F2}.

d_field_RequestBeginBlock_hash(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_RequestBeginBlock_hash(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
d_field_RequestBeginBlock_hash(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_RequestBeginBlock(Rest2, 0, 0,
					 NewFValue, F2, TrUserData).


d_field_RequestBeginBlock_header(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_RequestBeginBlock_header(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
d_field_RequestBeginBlock_header(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Header(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_RequestBeginBlock(Rest2, 0, 0, F1,
					 if F2 == undefined -> NewFValue;
					    true ->
						merge_msg_Header(F2, NewFValue,
								 TrUserData)
					 end,
					 TrUserData).


skip_varint_RequestBeginBlock(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_RequestBeginBlock(Rest, Z1, Z2, F1, F2,
				  TrUserData);
skip_varint_RequestBeginBlock(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_RequestBeginBlock(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_length_delimited_RequestBeginBlock(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_RequestBeginBlock(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_RequestBeginBlock(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RequestBeginBlock(Rest2, 0, 0, F1,
					 F2, TrUserData).


skip_32_RequestBeginBlock(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_RequestBeginBlock(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_64_RequestBeginBlock(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_RequestBeginBlock(Rest, Z1, Z2, F1,
					 F2, TrUserData).


d_msg_Validator(Bin, TrUserData) ->
    dfp_read_field_def_Validator(Bin, 0, 0,
				 id(<<>>, TrUserData), id(0, TrUserData),
				 TrUserData).

dfp_read_field_def_Validator(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    d_field_Validator_pubKey(Rest, Z1, Z2, F1, F2,
			     TrUserData);
dfp_read_field_def_Validator(<<16, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    d_field_Validator_power(Rest, Z1, Z2, F1, F2,
			    TrUserData);
dfp_read_field_def_Validator(<<>>, 0, 0, F1, F2, _) ->
    #'Validator'{pubKey = F1, power = F2};
dfp_read_field_def_Validator(Other, Z1, Z2, F1, F2,
			     TrUserData) ->
    dg_read_field_def_Validator(Other, Z1, Z2, F1, F2,
				TrUserData).

dg_read_field_def_Validator(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Validator(Rest, N + 7, X bsl N + Acc,
				F1, F2, TrUserData);
dg_read_field_def_Validator(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Validator_pubKey(Rest, 0, 0, F1, F2,
				   TrUserData);
      16 ->
	  d_field_Validator_power(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Validator(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_Validator(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_Validator(Rest, 0, 0, F1, F2,
						TrUserData);
	    5 -> skip_32_Validator(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_Validator(<<>>, 0, 0, F1, F2, _) ->
    #'Validator'{pubKey = F1, power = F2}.

d_field_Validator_pubKey(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_Validator_pubKey(Rest, N + 7, X bsl N + Acc, F1,
			     F2, TrUserData);
d_field_Validator_pubKey(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Validator(Rest2, 0, 0, NewFValue, F2,
				 TrUserData).


d_field_Validator_power(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_Validator_power(Rest, N + 7, X bsl N + Acc, F1,
			    F2, TrUserData);
d_field_Validator_power(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Validator(Rest, 0, 0, F1, NewFValue,
				 TrUserData).


skip_varint_Validator(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, TrUserData) ->
    skip_varint_Validator(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_Validator(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, TrUserData) ->
    dfp_read_field_def_Validator(Rest, Z1, Z2, F1, F2,
				 TrUserData).


skip_length_delimited_Validator(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Validator(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_Validator(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Validator(Rest2, 0, 0, F1, F2,
				 TrUserData).


skip_32_Validator(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  TrUserData) ->
    dfp_read_field_def_Validator(Rest, Z1, Z2, F1, F2,
				 TrUserData).


skip_64_Validator(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  TrUserData) ->
    dfp_read_field_def_Validator(Rest, Z1, Z2, F1, F2,
				 TrUserData).


d_msg_ResponseEndBlock(Bin, TrUserData) ->
    dfp_read_field_def_ResponseEndBlock(Bin, 0, 0,
					id([], TrUserData), TrUserData).

dfp_read_field_def_ResponseEndBlock(<<10, Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    d_field_ResponseEndBlock_diffs(Rest, Z1, Z2, F1,
				   TrUserData);
dfp_read_field_def_ResponseEndBlock(<<>>, 0, 0, F1,
				    TrUserData) ->
    #'ResponseEndBlock'{diffs =
			    lists_reverse(F1, TrUserData)};
dfp_read_field_def_ResponseEndBlock(Other, Z1, Z2, F1,
				    TrUserData) ->
    dg_read_field_def_ResponseEndBlock(Other, Z1, Z2, F1,
				       TrUserData).

dg_read_field_def_ResponseEndBlock(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ResponseEndBlock(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
dg_read_field_def_ResponseEndBlock(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ResponseEndBlock_diffs(Rest, 0, 0, F1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ResponseEndBlock(Rest, 0, 0, F1,
					     TrUserData);
	    1 ->
		skip_64_ResponseEndBlock(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_ResponseEndBlock(Rest, 0, 0, F1,
						       TrUserData);
	    5 ->
		skip_32_ResponseEndBlock(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_ResponseEndBlock(<<>>, 0, 0, F1,
				   TrUserData) ->
    #'ResponseEndBlock'{diffs =
			    lists_reverse(F1, TrUserData)}.

d_field_ResponseEndBlock_diffs(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_ResponseEndBlock_diffs(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
d_field_ResponseEndBlock_diffs(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Validator(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_ResponseEndBlock(Rest2, 0, 0,
					cons(NewFValue, F1, TrUserData),
					TrUserData).


skip_varint_ResponseEndBlock(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, TrUserData) ->
    skip_varint_ResponseEndBlock(Rest, Z1, Z2, F1,
				 TrUserData);
skip_varint_ResponseEndBlock(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_ResponseEndBlock(Rest, Z1, Z2, F1,
					TrUserData).


skip_length_delimited_ResponseEndBlock(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ResponseEndBlock(Rest, N + 7,
					   X bsl N + Acc, F1, TrUserData);
skip_length_delimited_ResponseEndBlock(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResponseEndBlock(Rest2, 0, 0, F1,
					TrUserData).


skip_32_ResponseEndBlock(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    dfp_read_field_def_ResponseEndBlock(Rest, Z1, Z2, F1,
					TrUserData).


skip_64_ResponseEndBlock(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    dfp_read_field_def_ResponseEndBlock(Rest, Z1, Z2, F1,
					TrUserData).


d_msg_RequestDeliverTx(Bin, TrUserData) ->
    dfp_read_field_def_RequestDeliverTx(Bin, 0, 0,
					id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_RequestDeliverTx(<<10, Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    d_field_RequestDeliverTx_tx(Rest, Z1, Z2, F1,
				TrUserData);
dfp_read_field_def_RequestDeliverTx(<<>>, 0, 0, F1,
				    _) ->
    #'RequestDeliverTx'{tx = F1};
dfp_read_field_def_RequestDeliverTx(Other, Z1, Z2, F1,
				    TrUserData) ->
    dg_read_field_def_RequestDeliverTx(Other, Z1, Z2, F1,
				       TrUserData).

dg_read_field_def_RequestDeliverTx(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RequestDeliverTx(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
dg_read_field_def_RequestDeliverTx(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_RequestDeliverTx_tx(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RequestDeliverTx(Rest, 0, 0, F1,
					     TrUserData);
	    1 ->
		skip_64_RequestDeliverTx(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_RequestDeliverTx(Rest, 0, 0, F1,
						       TrUserData);
	    5 ->
		skip_32_RequestDeliverTx(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_RequestDeliverTx(<<>>, 0, 0, F1, _) ->
    #'RequestDeliverTx'{tx = F1}.

d_field_RequestDeliverTx_tx(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_RequestDeliverTx_tx(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
d_field_RequestDeliverTx_tx(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_RequestDeliverTx(Rest2, 0, 0,
					NewFValue, TrUserData).


skip_varint_RequestDeliverTx(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, TrUserData) ->
    skip_varint_RequestDeliverTx(Rest, Z1, Z2, F1,
				 TrUserData);
skip_varint_RequestDeliverTx(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_RequestDeliverTx(Rest, Z1, Z2, F1,
					TrUserData).


skip_length_delimited_RequestDeliverTx(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_RequestDeliverTx(Rest, N + 7,
					   X bsl N + Acc, F1, TrUserData);
skip_length_delimited_RequestDeliverTx(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RequestDeliverTx(Rest2, 0, 0, F1,
					TrUserData).


skip_32_RequestDeliverTx(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    dfp_read_field_def_RequestDeliverTx(Rest, Z1, Z2, F1,
					TrUserData).


skip_64_RequestDeliverTx(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    dfp_read_field_def_RequestDeliverTx(Rest, Z1, Z2, F1,
					TrUserData).


d_msg_RequestCheckTx(Bin, TrUserData) ->
    dfp_read_field_def_RequestCheckTx(Bin, 0, 0,
				      id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_RequestCheckTx(<<10, Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    d_field_RequestCheckTx_tx(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_RequestCheckTx(<<>>, 0, 0, F1, _) ->
    #'RequestCheckTx'{tx = F1};
dfp_read_field_def_RequestCheckTx(Other, Z1, Z2, F1,
				  TrUserData) ->
    dg_read_field_def_RequestCheckTx(Other, Z1, Z2, F1,
				     TrUserData).

dg_read_field_def_RequestCheckTx(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RequestCheckTx(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
dg_read_field_def_RequestCheckTx(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_RequestCheckTx_tx(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RequestCheckTx(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_RequestCheckTx(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_RequestCheckTx(Rest, 0, 0, F1,
						     TrUserData);
	    5 -> skip_32_RequestCheckTx(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_RequestCheckTx(<<>>, 0, 0, F1, _) ->
    #'RequestCheckTx'{tx = F1}.

d_field_RequestCheckTx_tx(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData)
    when N < 57 ->
    d_field_RequestCheckTx_tx(Rest, N + 7, X bsl N + Acc,
			      F1, TrUserData);
d_field_RequestCheckTx_tx(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_RequestCheckTx(Rest2, 0, 0,
				      NewFValue, TrUserData).


skip_varint_RequestCheckTx(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    skip_varint_RequestCheckTx(Rest, Z1, Z2, F1,
			       TrUserData);
skip_varint_RequestCheckTx(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_RequestCheckTx(Rest, Z1, Z2, F1,
				      TrUserData).


skip_length_delimited_RequestCheckTx(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_RequestCheckTx(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
skip_length_delimited_RequestCheckTx(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RequestCheckTx(Rest2, 0, 0, F1,
				      TrUserData).


skip_32_RequestCheckTx(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_RequestCheckTx(Rest, Z1, Z2, F1,
				      TrUserData).


skip_64_RequestCheckTx(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_RequestCheckTx(Rest, Z1, Z2, F1,
				      TrUserData).


d_msg_RequestCommit(Bin, TrUserData) ->
    dfp_read_field_def_RequestCommit(Bin, 0, 0, TrUserData).

dfp_read_field_def_RequestCommit(<<>>, 0, 0, _) ->
    #'RequestCommit'{};
dfp_read_field_def_RequestCommit(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_RequestCommit(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_RequestCommit(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RequestCommit(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_RequestCommit(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_RequestCommit(Rest, 0, 0, TrUserData);
      1 -> skip_64_RequestCommit(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_RequestCommit(Rest, 0, 0,
					      TrUserData);
      5 -> skip_32_RequestCommit(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_RequestCommit(<<>>, 0, 0, _) ->
    #'RequestCommit'{}.

skip_varint_RequestCommit(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_RequestCommit(Rest, Z1, Z2, TrUserData);
skip_varint_RequestCommit(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_RequestCommit(Rest, Z1, Z2,
				     TrUserData).


skip_length_delimited_RequestCommit(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_RequestCommit(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_RequestCommit(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RequestCommit(Rest2, 0, 0,
				     TrUserData).


skip_32_RequestCommit(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_RequestCommit(Rest, Z1, Z2,
				     TrUserData).


skip_64_RequestCommit(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_RequestCommit(Rest, Z1, Z2,
				     TrUserData).


d_msg_RequestEndBlock(Bin, TrUserData) ->
    dfp_read_field_def_RequestEndBlock(Bin, 0, 0,
				       id(0, TrUserData), TrUserData).

dfp_read_field_def_RequestEndBlock(<<8, Rest/binary>>,
				   Z1, Z2, F1, TrUserData) ->
    d_field_RequestEndBlock_height(Rest, Z1, Z2, F1,
				   TrUserData);
dfp_read_field_def_RequestEndBlock(<<>>, 0, 0, F1, _) ->
    #'RequestEndBlock'{height = F1};
dfp_read_field_def_RequestEndBlock(Other, Z1, Z2, F1,
				   TrUserData) ->
    dg_read_field_def_RequestEndBlock(Other, Z1, Z2, F1,
				      TrUserData).

dg_read_field_def_RequestEndBlock(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RequestEndBlock(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
dg_read_field_def_RequestEndBlock(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_RequestEndBlock_height(Rest, 0, 0, F1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RequestEndBlock(Rest, 0, 0, F1, TrUserData);
	    1 ->
		skip_64_RequestEndBlock(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_RequestEndBlock(Rest, 0, 0, F1,
						      TrUserData);
	    5 -> skip_32_RequestEndBlock(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_RequestEndBlock(<<>>, 0, 0, F1, _) ->
    #'RequestEndBlock'{height = F1}.

d_field_RequestEndBlock_height(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_RequestEndBlock_height(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
d_field_RequestEndBlock_height(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_RequestEndBlock(Rest, 0, 0,
				       NewFValue, TrUserData).


skip_varint_RequestEndBlock(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, TrUserData) ->
    skip_varint_RequestEndBlock(Rest, Z1, Z2, F1,
				TrUserData);
skip_varint_RequestEndBlock(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_RequestEndBlock(Rest, Z1, Z2, F1,
				       TrUserData).


skip_length_delimited_RequestEndBlock(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_RequestEndBlock(Rest, N + 7,
					  X bsl N + Acc, F1, TrUserData);
skip_length_delimited_RequestEndBlock(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RequestEndBlock(Rest2, 0, 0, F1,
				       TrUserData).


skip_32_RequestEndBlock(<<_:32, Rest/binary>>, Z1, Z2,
			F1, TrUserData) ->
    dfp_read_field_def_RequestEndBlock(Rest, Z1, Z2, F1,
				       TrUserData).


skip_64_RequestEndBlock(<<_:64, Rest/binary>>, Z1, Z2,
			F1, TrUserData) ->
    dfp_read_field_def_RequestEndBlock(Rest, Z1, Z2, F1,
				       TrUserData).


d_msg_RequestInitChain(Bin, TrUserData) ->
    dfp_read_field_def_RequestInitChain(Bin, 0, 0,
					id([], TrUserData), TrUserData).

dfp_read_field_def_RequestInitChain(<<10, Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    d_field_RequestInitChain_validators(Rest, Z1, Z2, F1,
					TrUserData);
dfp_read_field_def_RequestInitChain(<<>>, 0, 0, F1,
				    TrUserData) ->
    #'RequestInitChain'{validators =
			    lists_reverse(F1, TrUserData)};
dfp_read_field_def_RequestInitChain(Other, Z1, Z2, F1,
				    TrUserData) ->
    dg_read_field_def_RequestInitChain(Other, Z1, Z2, F1,
				       TrUserData).

dg_read_field_def_RequestInitChain(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RequestInitChain(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
dg_read_field_def_RequestInitChain(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_RequestInitChain_validators(Rest, 0, 0, F1,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RequestInitChain(Rest, 0, 0, F1,
					     TrUserData);
	    1 ->
		skip_64_RequestInitChain(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_RequestInitChain(Rest, 0, 0, F1,
						       TrUserData);
	    5 ->
		skip_32_RequestInitChain(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_RequestInitChain(<<>>, 0, 0, F1,
				   TrUserData) ->
    #'RequestInitChain'{validators =
			    lists_reverse(F1, TrUserData)}.

d_field_RequestInitChain_validators(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_RequestInitChain_validators(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
d_field_RequestInitChain_validators(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Validator(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_RequestInitChain(Rest2, 0, 0,
					cons(NewFValue, F1, TrUserData),
					TrUserData).


skip_varint_RequestInitChain(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, TrUserData) ->
    skip_varint_RequestInitChain(Rest, Z1, Z2, F1,
				 TrUserData);
skip_varint_RequestInitChain(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_RequestInitChain(Rest, Z1, Z2, F1,
					TrUserData).


skip_length_delimited_RequestInitChain(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_RequestInitChain(Rest, N + 7,
					   X bsl N + Acc, F1, TrUserData);
skip_length_delimited_RequestInitChain(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RequestInitChain(Rest2, 0, 0, F1,
					TrUserData).


skip_32_RequestInitChain(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    dfp_read_field_def_RequestInitChain(Rest, Z1, Z2, F1,
					TrUserData).


skip_64_RequestInitChain(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    dfp_read_field_def_RequestInitChain(Rest, Z1, Z2, F1,
					TrUserData).


d_msg_RequestQuery(Bin, TrUserData) ->
    dfp_read_field_def_RequestQuery(Bin, 0, 0,
				    id(<<>>, TrUserData), id([], TrUserData),
				    id(0, TrUserData), id(false, TrUserData),
				    TrUserData).

dfp_read_field_def_RequestQuery(<<10, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_RequestQuery_data(Rest, Z1, Z2, F1, F2, F3, F4,
			      TrUserData);
dfp_read_field_def_RequestQuery(<<18, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_RequestQuery_path(Rest, Z1, Z2, F1, F2, F3, F4,
			      TrUserData);
dfp_read_field_def_RequestQuery(<<24, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_RequestQuery_height(Rest, Z1, Z2, F1, F2, F3,
				F4, TrUserData);
dfp_read_field_def_RequestQuery(<<32, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_RequestQuery_prove(Rest, Z1, Z2, F1, F2, F3, F4,
			       TrUserData);
dfp_read_field_def_RequestQuery(<<>>, 0, 0, F1, F2, F3,
				F4, _) ->
    #'RequestQuery'{data = F1, path = F2, height = F3,
		    prove = F4};
dfp_read_field_def_RequestQuery(Other, Z1, Z2, F1, F2,
				F3, F4, TrUserData) ->
    dg_read_field_def_RequestQuery(Other, Z1, Z2, F1, F2,
				   F3, F4, TrUserData).

dg_read_field_def_RequestQuery(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RequestQuery(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, TrUserData);
dg_read_field_def_RequestQuery(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_RequestQuery_data(Rest, 0, 0, F1, F2, F3, F4,
				    TrUserData);
      18 ->
	  d_field_RequestQuery_path(Rest, 0, 0, F1, F2, F3, F4,
				    TrUserData);
      24 ->
	  d_field_RequestQuery_height(Rest, 0, 0, F1, F2, F3, F4,
				      TrUserData);
      32 ->
	  d_field_RequestQuery_prove(Rest, 0, 0, F1, F2, F3, F4,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RequestQuery(Rest, 0, 0, F1, F2, F3, F4,
					 TrUserData);
	    1 ->
		skip_64_RequestQuery(Rest, 0, 0, F1, F2, F3, F4,
				     TrUserData);
	    2 ->
		skip_length_delimited_RequestQuery(Rest, 0, 0, F1, F2,
						   F3, F4, TrUserData);
	    5 ->
		skip_32_RequestQuery(Rest, 0, 0, F1, F2, F3, F4,
				     TrUserData)
	  end
    end;
dg_read_field_def_RequestQuery(<<>>, 0, 0, F1, F2, F3,
			       F4, _) ->
    #'RequestQuery'{data = F1, path = F2, height = F3,
		    prove = F4}.

d_field_RequestQuery_data(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_RequestQuery_data(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, TrUserData);
d_field_RequestQuery_data(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_RequestQuery(Rest2, 0, 0, NewFValue,
				    F2, F3, F4, TrUserData).


d_field_RequestQuery_path(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_RequestQuery_path(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, TrUserData);
d_field_RequestQuery_path(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, _, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_RequestQuery(Rest2, 0, 0, F1,
				    NewFValue, F3, F4, TrUserData).


d_field_RequestQuery_height(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_RequestQuery_height(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, TrUserData);
d_field_RequestQuery_height(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, _, F4, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_RequestQuery(Rest, 0, 0, F1, F2,
				    NewFValue, F4, TrUserData).


d_field_RequestQuery_prove(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_RequestQuery_prove(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, TrUserData);
d_field_RequestQuery_prove(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, _, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_RequestQuery(Rest, 0, 0, F1, F2, F3,
				    NewFValue, TrUserData).


skip_varint_RequestQuery(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, TrUserData) ->
    skip_varint_RequestQuery(Rest, Z1, Z2, F1, F2, F3, F4,
			     TrUserData);
skip_varint_RequestQuery(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_RequestQuery(Rest, Z1, Z2, F1, F2,
				    F3, F4, TrUserData).


skip_length_delimited_RequestQuery(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    skip_length_delimited_RequestQuery(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4,
				       TrUserData);
skip_length_delimited_RequestQuery(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RequestQuery(Rest2, 0, 0, F1, F2, F3,
				    F4, TrUserData).


skip_32_RequestQuery(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, TrUserData) ->
    dfp_read_field_def_RequestQuery(Rest, Z1, Z2, F1, F2,
				    F3, F4, TrUserData).


skip_64_RequestQuery(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, TrUserData) ->
    dfp_read_field_def_RequestQuery(Rest, Z1, Z2, F1, F2,
				    F3, F4, TrUserData).


d_msg_RequestSetOption(Bin, TrUserData) ->
    dfp_read_field_def_RequestSetOption(Bin, 0, 0,
					id([], TrUserData), id([], TrUserData),
					TrUserData).

dfp_read_field_def_RequestSetOption(<<10, Rest/binary>>,
				    Z1, Z2, F1, F2, TrUserData) ->
    d_field_RequestSetOption_key(Rest, Z1, Z2, F1, F2,
				 TrUserData);
dfp_read_field_def_RequestSetOption(<<18, Rest/binary>>,
				    Z1, Z2, F1, F2, TrUserData) ->
    d_field_RequestSetOption_value(Rest, Z1, Z2, F1, F2,
				   TrUserData);
dfp_read_field_def_RequestSetOption(<<>>, 0, 0, F1, F2,
				    _) ->
    #'RequestSetOption'{key = F1, value = F2};
dfp_read_field_def_RequestSetOption(Other, Z1, Z2, F1,
				    F2, TrUserData) ->
    dg_read_field_def_RequestSetOption(Other, Z1, Z2, F1,
				       F2, TrUserData).

dg_read_field_def_RequestSetOption(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RequestSetOption(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_RequestSetOption(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_RequestSetOption_key(Rest, 0, 0, F1, F2,
				       TrUserData);
      18 ->
	  d_field_RequestSetOption_value(Rest, 0, 0, F1, F2,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RequestSetOption(Rest, 0, 0, F1, F2,
					     TrUserData);
	    1 ->
		skip_64_RequestSetOption(Rest, 0, 0, F1, F2,
					 TrUserData);
	    2 ->
		skip_length_delimited_RequestSetOption(Rest, 0, 0, F1,
						       F2, TrUserData);
	    5 ->
		skip_32_RequestSetOption(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_RequestSetOption(<<>>, 0, 0, F1, F2,
				   _) ->
    #'RequestSetOption'{key = F1, value = F2}.

d_field_RequestSetOption_key(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_RequestSetOption_key(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
d_field_RequestSetOption_key(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_RequestSetOption(Rest2, 0, 0,
					NewFValue, F2, TrUserData).


d_field_RequestSetOption_value(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_RequestSetOption_value(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
d_field_RequestSetOption_value(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_RequestSetOption(Rest2, 0, 0, F1,
					NewFValue, TrUserData).


skip_varint_RequestSetOption(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_RequestSetOption(Rest, Z1, Z2, F1, F2,
				 TrUserData);
skip_varint_RequestSetOption(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_RequestSetOption(Rest, Z1, Z2, F1,
					F2, TrUserData).


skip_length_delimited_RequestSetOption(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_RequestSetOption(Rest, N + 7,
					   X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_RequestSetOption(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RequestSetOption(Rest2, 0, 0, F1, F2,
					TrUserData).


skip_32_RequestSetOption(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, TrUserData) ->
    dfp_read_field_def_RequestSetOption(Rest, Z1, Z2, F1,
					F2, TrUserData).


skip_64_RequestSetOption(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, TrUserData) ->
    dfp_read_field_def_RequestSetOption(Rest, Z1, Z2, F1,
					F2, TrUserData).


d_msg_RequestFlush(Bin, TrUserData) ->
    dfp_read_field_def_RequestFlush(Bin, 0, 0, TrUserData).

dfp_read_field_def_RequestFlush(<<>>, 0, 0, _) ->
    #'RequestFlush'{};
dfp_read_field_def_RequestFlush(Other, Z1, Z2,
				TrUserData) ->
    dg_read_field_def_RequestFlush(Other, Z1, Z2,
				   TrUserData).

dg_read_field_def_RequestFlush(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RequestFlush(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
dg_read_field_def_RequestFlush(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_RequestFlush(Rest, 0, 0, TrUserData);
      1 -> skip_64_RequestFlush(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_RequestFlush(Rest, 0, 0,
					     TrUserData);
      5 -> skip_32_RequestFlush(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_RequestFlush(<<>>, 0, 0, _) ->
    #'RequestFlush'{}.

skip_varint_RequestFlush(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    skip_varint_RequestFlush(Rest, Z1, Z2, TrUserData);
skip_varint_RequestFlush(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    dfp_read_field_def_RequestFlush(Rest, Z1, Z2,
				    TrUserData).


skip_length_delimited_RequestFlush(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_RequestFlush(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
skip_length_delimited_RequestFlush(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RequestFlush(Rest2, 0, 0,
				    TrUserData).


skip_32_RequestFlush(<<_:32, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_RequestFlush(Rest, Z1, Z2,
				    TrUserData).


skip_64_RequestFlush(<<_:64, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_RequestFlush(Rest, Z1, Z2,
				    TrUserData).


d_msg_RequestEcho(Bin, TrUserData) ->
    dfp_read_field_def_RequestEcho(Bin, 0, 0,
				   id([], TrUserData), TrUserData).

dfp_read_field_def_RequestEcho(<<10, Rest/binary>>, Z1,
			       Z2, F1, TrUserData) ->
    d_field_RequestEcho_message(Rest, Z1, Z2, F1,
				TrUserData);
dfp_read_field_def_RequestEcho(<<>>, 0, 0, F1, _) ->
    #'RequestEcho'{message = F1};
dfp_read_field_def_RequestEcho(Other, Z1, Z2, F1,
			       TrUserData) ->
    dg_read_field_def_RequestEcho(Other, Z1, Z2, F1,
				  TrUserData).

dg_read_field_def_RequestEcho(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RequestEcho(Rest, N + 7,
				  X bsl N + Acc, F1, TrUserData);
dg_read_field_def_RequestEcho(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_RequestEcho_message(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RequestEcho(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_RequestEcho(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_RequestEcho(Rest, 0, 0, F1,
						  TrUserData);
	    5 -> skip_32_RequestEcho(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_RequestEcho(<<>>, 0, 0, F1, _) ->
    #'RequestEcho'{message = F1}.

d_field_RequestEcho_message(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_RequestEcho_message(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
d_field_RequestEcho_message(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_RequestEcho(Rest2, 0, 0, NewFValue,
				   TrUserData).


skip_varint_RequestEcho(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    skip_varint_RequestEcho(Rest, Z1, Z2, F1, TrUserData);
skip_varint_RequestEcho(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, TrUserData) ->
    dfp_read_field_def_RequestEcho(Rest, Z1, Z2, F1,
				   TrUserData).


skip_length_delimited_RequestEcho(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_RequestEcho(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
skip_length_delimited_RequestEcho(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RequestEcho(Rest2, 0, 0, F1,
				   TrUserData).


skip_32_RequestEcho(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_RequestEcho(Rest, Z1, Z2, F1,
				   TrUserData).


skip_64_RequestEcho(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    TrUserData) ->
    dfp_read_field_def_RequestEcho(Rest, Z1, Z2, F1,
				   TrUserData).


d_msg_Request(Bin, TrUserData) ->
    dfp_read_field_def_Request(Bin, 0, 0,
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Request(<<10, Rest/binary>>, Z1, Z2,
			   F1, TrUserData) ->
    d_field_Request_echo(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_Request(<<18, Rest/binary>>, Z1, Z2,
			   F1, TrUserData) ->
    d_field_Request_flush(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_Request(<<26, Rest/binary>>, Z1, Z2,
			   F1, TrUserData) ->
    d_field_Request_info(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_Request(<<34, Rest/binary>>, Z1, Z2,
			   F1, TrUserData) ->
    d_field_Request_set_option(Rest, Z1, Z2, F1,
			       TrUserData);
dfp_read_field_def_Request(<<42, Rest/binary>>, Z1, Z2,
			   F1, TrUserData) ->
    d_field_Request_deliver_tx(Rest, Z1, Z2, F1,
			       TrUserData);
dfp_read_field_def_Request(<<50, Rest/binary>>, Z1, Z2,
			   F1, TrUserData) ->
    d_field_Request_check_tx(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_Request(<<58, Rest/binary>>, Z1, Z2,
			   F1, TrUserData) ->
    d_field_Request_commit(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_Request(<<66, Rest/binary>>, Z1, Z2,
			   F1, TrUserData) ->
    d_field_Request_query(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_Request(<<74, Rest/binary>>, Z1, Z2,
			   F1, TrUserData) ->
    d_field_Request_init_chain(Rest, Z1, Z2, F1,
			       TrUserData);
dfp_read_field_def_Request(<<82, Rest/binary>>, Z1, Z2,
			   F1, TrUserData) ->
    d_field_Request_begin_block(Rest, Z1, Z2, F1,
				TrUserData);
dfp_read_field_def_Request(<<90, Rest/binary>>, Z1, Z2,
			   F1, TrUserData) ->
    d_field_Request_end_block(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_Request(<<>>, 0, 0, F1, _) ->
    #'Request'{value = F1};
dfp_read_field_def_Request(Other, Z1, Z2, F1,
			   TrUserData) ->
    dg_read_field_def_Request(Other, Z1, Z2, F1,
			      TrUserData).

dg_read_field_def_Request(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Request(Rest, N + 7, X bsl N + Acc,
			      F1, TrUserData);
dg_read_field_def_Request(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Request_echo(Rest, 0, 0, F1, TrUserData);
      18 -> d_field_Request_flush(Rest, 0, 0, F1, TrUserData);
      26 -> d_field_Request_info(Rest, 0, 0, F1, TrUserData);
      34 ->
	  d_field_Request_set_option(Rest, 0, 0, F1, TrUserData);
      42 ->
	  d_field_Request_deliver_tx(Rest, 0, 0, F1, TrUserData);
      50 ->
	  d_field_Request_check_tx(Rest, 0, 0, F1, TrUserData);
      58 ->
	  d_field_Request_commit(Rest, 0, 0, F1, TrUserData);
      66 -> d_field_Request_query(Rest, 0, 0, F1, TrUserData);
      74 ->
	  d_field_Request_init_chain(Rest, 0, 0, F1, TrUserData);
      82 ->
	  d_field_Request_begin_block(Rest, 0, 0, F1, TrUserData);
      90 ->
	  d_field_Request_end_block(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Request(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_Request(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_Request(Rest, 0, 0, F1,
					      TrUserData);
	    5 -> skip_32_Request(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_Request(<<>>, 0, 0, F1, _) ->
    #'Request'{value = F1}.

d_field_Request_echo(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, TrUserData)
    when N < 57 ->
    d_field_Request_echo(Rest, N + 7, X bsl N + Acc, F1,
			 TrUserData);
d_field_Request_echo(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RequestEcho(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Request(Rest2, 0, 0,
			       case F1 of
				 undefined -> {echo, NewFValue};
				 {echo, MVF1} ->
				     {echo,
				      merge_msg_RequestEcho(MVF1, NewFValue,
							    TrUserData)};
				 _ -> {echo, NewFValue}
			       end,
			       TrUserData).


d_field_Request_flush(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, TrUserData)
    when N < 57 ->
    d_field_Request_flush(Rest, N + 7, X bsl N + Acc, F1,
			  TrUserData);
d_field_Request_flush(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RequestFlush(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Request(Rest2, 0, 0,
			       case F1 of
				 undefined -> {flush, NewFValue};
				 {flush, MVF1} ->
				     {flush,
				      merge_msg_RequestFlush(MVF1, NewFValue,
							     TrUserData)};
				 _ -> {flush, NewFValue}
			       end,
			       TrUserData).


d_field_Request_info(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, TrUserData)
    when N < 57 ->
    d_field_Request_info(Rest, N + 7, X bsl N + Acc, F1,
			 TrUserData);
d_field_Request_info(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RequestInfo(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Request(Rest2, 0, 0,
			       case F1 of
				 undefined -> {info, NewFValue};
				 {info, MVF1} ->
				     {info,
				      merge_msg_RequestInfo(MVF1, NewFValue,
							    TrUserData)};
				 _ -> {info, NewFValue}
			       end,
			       TrUserData).


d_field_Request_set_option(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData)
    when N < 57 ->
    d_field_Request_set_option(Rest, N + 7, X bsl N + Acc,
			       F1, TrUserData);
d_field_Request_set_option(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RequestSetOption(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Request(Rest2, 0, 0,
			       case F1 of
				 undefined -> {set_option, NewFValue};
				 {set_option, MVF1} ->
				     {set_option,
				      merge_msg_RequestSetOption(MVF1,
								 NewFValue,
								 TrUserData)};
				 _ -> {set_option, NewFValue}
			       end,
			       TrUserData).


d_field_Request_deliver_tx(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData)
    when N < 57 ->
    d_field_Request_deliver_tx(Rest, N + 7, X bsl N + Acc,
			       F1, TrUserData);
d_field_Request_deliver_tx(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RequestDeliverTx(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Request(Rest2, 0, 0,
			       case F1 of
				 undefined -> {deliver_tx, NewFValue};
				 {deliver_tx, MVF1} ->
				     {deliver_tx,
				      merge_msg_RequestDeliverTx(MVF1,
								 NewFValue,
								 TrUserData)};
				 _ -> {deliver_tx, NewFValue}
			       end,
			       TrUserData).


d_field_Request_check_tx(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, TrUserData)
    when N < 57 ->
    d_field_Request_check_tx(Rest, N + 7, X bsl N + Acc, F1,
			     TrUserData);
d_field_Request_check_tx(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RequestCheckTx(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Request(Rest2, 0, 0,
			       case F1 of
				 undefined -> {check_tx, NewFValue};
				 {check_tx, MVF1} ->
				     {check_tx,
				      merge_msg_RequestCheckTx(MVF1, NewFValue,
							       TrUserData)};
				 _ -> {check_tx, NewFValue}
			       end,
			       TrUserData).


d_field_Request_commit(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, TrUserData)
    when N < 57 ->
    d_field_Request_commit(Rest, N + 7, X bsl N + Acc, F1,
			   TrUserData);
d_field_Request_commit(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RequestCommit(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Request(Rest2, 0, 0,
			       case F1 of
				 undefined -> {commit, NewFValue};
				 {commit, MVF1} ->
				     {commit,
				      merge_msg_RequestCommit(MVF1, NewFValue,
							      TrUserData)};
				 _ -> {commit, NewFValue}
			       end,
			       TrUserData).


d_field_Request_query(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, TrUserData)
    when N < 57 ->
    d_field_Request_query(Rest, N + 7, X bsl N + Acc, F1,
			  TrUserData);
d_field_Request_query(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RequestQuery(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Request(Rest2, 0, 0,
			       case F1 of
				 undefined -> {query, NewFValue};
				 {query, MVF1} ->
				     {query,
				      merge_msg_RequestQuery(MVF1, NewFValue,
							     TrUserData)};
				 _ -> {query, NewFValue}
			       end,
			       TrUserData).


d_field_Request_init_chain(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData)
    when N < 57 ->
    d_field_Request_init_chain(Rest, N + 7, X bsl N + Acc,
			       F1, TrUserData);
d_field_Request_init_chain(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RequestInitChain(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Request(Rest2, 0, 0,
			       case F1 of
				 undefined -> {init_chain, NewFValue};
				 {init_chain, MVF1} ->
				     {init_chain,
				      merge_msg_RequestInitChain(MVF1,
								 NewFValue,
								 TrUserData)};
				 _ -> {init_chain, NewFValue}
			       end,
			       TrUserData).


d_field_Request_begin_block(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_Request_begin_block(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
d_field_Request_begin_block(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RequestBeginBlock(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Request(Rest2, 0, 0,
			       case F1 of
				 undefined -> {begin_block, NewFValue};
				 {begin_block, MVF1} ->
				     {begin_block,
				      merge_msg_RequestBeginBlock(MVF1,
								  NewFValue,
								  TrUserData)};
				 _ -> {begin_block, NewFValue}
			       end,
			       TrUserData).


d_field_Request_end_block(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData)
    when N < 57 ->
    d_field_Request_end_block(Rest, N + 7, X bsl N + Acc,
			      F1, TrUserData);
d_field_Request_end_block(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RequestEndBlock(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Request(Rest2, 0, 0,
			       case F1 of
				 undefined -> {end_block, NewFValue};
				 {end_block, MVF1} ->
				     {end_block,
				      merge_msg_RequestEndBlock(MVF1, NewFValue,
								TrUserData)};
				 _ -> {end_block, NewFValue}
			       end,
			       TrUserData).


skip_varint_Request(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, TrUserData) ->
    skip_varint_Request(Rest, Z1, Z2, F1, TrUserData);
skip_varint_Request(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F1,
			       TrUserData).


skip_length_delimited_Request(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Request(Rest, N + 7,
				  X bsl N + Acc, F1, TrUserData);
skip_length_delimited_Request(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Request(Rest2, 0, 0, F1, TrUserData).


skip_32_Request(<<_:32, Rest/binary>>, Z1, Z2, F1,
		TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F1,
			       TrUserData).


skip_64_Request(<<_:64, Rest/binary>>, Z1, Z2, F1,
		TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F1,
			       TrUserData).


d_msg_ResponseInfo(Bin, TrUserData) ->
    dfp_read_field_def_ResponseInfo(Bin, 0, 0,
				    id([], TrUserData), id([], TrUserData),
				    id(0, TrUserData), id(<<>>, TrUserData),
				    TrUserData).

dfp_read_field_def_ResponseInfo(<<10, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_ResponseInfo_data(Rest, Z1, Z2, F1, F2, F3, F4,
			      TrUserData);
dfp_read_field_def_ResponseInfo(<<18, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_ResponseInfo_version(Rest, Z1, Z2, F1, F2, F3,
				 F4, TrUserData);
dfp_read_field_def_ResponseInfo(<<24, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_ResponseInfo_last_block_height(Rest, Z1, Z2, F1,
					   F2, F3, F4, TrUserData);
dfp_read_field_def_ResponseInfo(<<34, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_ResponseInfo_last_block_app_hash(Rest, Z1, Z2,
					     F1, F2, F3, F4, TrUserData);
dfp_read_field_def_ResponseInfo(<<>>, 0, 0, F1, F2, F3,
				F4, _) ->
    #'ResponseInfo'{data = F1, version = F2,
		    last_block_height = F3, last_block_app_hash = F4};
dfp_read_field_def_ResponseInfo(Other, Z1, Z2, F1, F2,
				F3, F4, TrUserData) ->
    dg_read_field_def_ResponseInfo(Other, Z1, Z2, F1, F2,
				   F3, F4, TrUserData).

dg_read_field_def_ResponseInfo(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ResponseInfo(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, TrUserData);
dg_read_field_def_ResponseInfo(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ResponseInfo_data(Rest, 0, 0, F1, F2, F3, F4,
				    TrUserData);
      18 ->
	  d_field_ResponseInfo_version(Rest, 0, 0, F1, F2, F3, F4,
				       TrUserData);
      24 ->
	  d_field_ResponseInfo_last_block_height(Rest, 0, 0, F1,
						 F2, F3, F4, TrUserData);
      34 ->
	  d_field_ResponseInfo_last_block_app_hash(Rest, 0, 0, F1,
						   F2, F3, F4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ResponseInfo(Rest, 0, 0, F1, F2, F3, F4,
					 TrUserData);
	    1 ->
		skip_64_ResponseInfo(Rest, 0, 0, F1, F2, F3, F4,
				     TrUserData);
	    2 ->
		skip_length_delimited_ResponseInfo(Rest, 0, 0, F1, F2,
						   F3, F4, TrUserData);
	    5 ->
		skip_32_ResponseInfo(Rest, 0, 0, F1, F2, F3, F4,
				     TrUserData)
	  end
    end;
dg_read_field_def_ResponseInfo(<<>>, 0, 0, F1, F2, F3,
			       F4, _) ->
    #'ResponseInfo'{data = F1, version = F2,
		    last_block_height = F3, last_block_app_hash = F4}.

d_field_ResponseInfo_data(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_ResponseInfo_data(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, TrUserData);
d_field_ResponseInfo_data(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ResponseInfo(Rest2, 0, 0, NewFValue,
				    F2, F3, F4, TrUserData).


d_field_ResponseInfo_version(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_ResponseInfo_version(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, TrUserData);
d_field_ResponseInfo_version(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, _, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ResponseInfo(Rest2, 0, 0, F1,
				    NewFValue, F3, F4, TrUserData).


d_field_ResponseInfo_last_block_height(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_ResponseInfo_last_block_height(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4,
					   TrUserData);
d_field_ResponseInfo_last_block_height(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, _, F4, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResponseInfo(Rest, 0, 0, F1, F2,
				    NewFValue, F4, TrUserData).


d_field_ResponseInfo_last_block_app_hash(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_ResponseInfo_last_block_app_hash(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4,
					     TrUserData);
d_field_ResponseInfo_last_block_app_hash(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ResponseInfo(Rest2, 0, 0, F1, F2, F3,
				    NewFValue, TrUserData).


skip_varint_ResponseInfo(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, TrUserData) ->
    skip_varint_ResponseInfo(Rest, Z1, Z2, F1, F2, F3, F4,
			     TrUserData);
skip_varint_ResponseInfo(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_ResponseInfo(Rest, Z1, Z2, F1, F2,
				    F3, F4, TrUserData).


skip_length_delimited_ResponseInfo(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    skip_length_delimited_ResponseInfo(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4,
				       TrUserData);
skip_length_delimited_ResponseInfo(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResponseInfo(Rest2, 0, 0, F1, F2, F3,
				    F4, TrUserData).


skip_32_ResponseInfo(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, TrUserData) ->
    dfp_read_field_def_ResponseInfo(Rest, Z1, Z2, F1, F2,
				    F3, F4, TrUserData).


skip_64_ResponseInfo(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, TrUserData) ->
    dfp_read_field_def_ResponseInfo(Rest, Z1, Z2, F1, F2,
				    F3, F4, TrUserData).


d_msg_ResponseSetOption(Bin, TrUserData) ->
    dfp_read_field_def_ResponseSetOption(Bin, 0, 0,
					 id([], TrUserData), TrUserData).

dfp_read_field_def_ResponseSetOption(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, TrUserData) ->
    d_field_ResponseSetOption_log(Rest, Z1, Z2, F1,
				  TrUserData);
dfp_read_field_def_ResponseSetOption(<<>>, 0, 0, F1,
				     _) ->
    #'ResponseSetOption'{log = F1};
dfp_read_field_def_ResponseSetOption(Other, Z1, Z2, F1,
				     TrUserData) ->
    dg_read_field_def_ResponseSetOption(Other, Z1, Z2, F1,
					TrUserData).

dg_read_field_def_ResponseSetOption(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ResponseSetOption(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
dg_read_field_def_ResponseSetOption(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ResponseSetOption_log(Rest, 0, 0, F1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ResponseSetOption(Rest, 0, 0, F1,
					      TrUserData);
	    1 ->
		skip_64_ResponseSetOption(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_ResponseSetOption(Rest, 0, 0, F1,
							TrUserData);
	    5 ->
		skip_32_ResponseSetOption(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_ResponseSetOption(<<>>, 0, 0, F1,
				    _) ->
    #'ResponseSetOption'{log = F1}.

d_field_ResponseSetOption_log(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_ResponseSetOption_log(Rest, N + 7,
				  X bsl N + Acc, F1, TrUserData);
d_field_ResponseSetOption_log(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ResponseSetOption(Rest2, 0, 0,
					 NewFValue, TrUserData).


skip_varint_ResponseSetOption(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, TrUserData) ->
    skip_varint_ResponseSetOption(Rest, Z1, Z2, F1,
				  TrUserData);
skip_varint_ResponseSetOption(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_ResponseSetOption(Rest, Z1, Z2, F1,
					 TrUserData).


skip_length_delimited_ResponseSetOption(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ResponseSetOption(Rest, N + 7,
					    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_ResponseSetOption(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResponseSetOption(Rest2, 0, 0, F1,
					 TrUserData).


skip_32_ResponseSetOption(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    dfp_read_field_def_ResponseSetOption(Rest, Z1, Z2, F1,
					 TrUserData).


skip_64_ResponseSetOption(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    dfp_read_field_def_ResponseSetOption(Rest, Z1, Z2, F1,
					 TrUserData).


d_msg_ResponseCheckTx(Bin, TrUserData) ->
    dfp_read_field_def_ResponseCheckTx(Bin, 0, 0,
				       id('OK', TrUserData),
				       id(<<>>, TrUserData), id([], TrUserData),
				       TrUserData).

dfp_read_field_def_ResponseCheckTx(<<8, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_ResponseCheckTx_code(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData);
dfp_read_field_def_ResponseCheckTx(<<18, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_ResponseCheckTx_data(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData);
dfp_read_field_def_ResponseCheckTx(<<26, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_ResponseCheckTx_log(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
dfp_read_field_def_ResponseCheckTx(<<>>, 0, 0, F1, F2,
				   F3, _) ->
    #'ResponseCheckTx'{code = F1, data = F2, log = F3};
dfp_read_field_def_ResponseCheckTx(Other, Z1, Z2, F1,
				   F2, F3, TrUserData) ->
    dg_read_field_def_ResponseCheckTx(Other, Z1, Z2, F1, F2,
				      F3, TrUserData).

dg_read_field_def_ResponseCheckTx(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ResponseCheckTx(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_ResponseCheckTx(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ResponseCheckTx_code(Rest, 0, 0, F1, F2, F3,
				       TrUserData);
      18 ->
	  d_field_ResponseCheckTx_data(Rest, 0, 0, F1, F2, F3,
				       TrUserData);
      26 ->
	  d_field_ResponseCheckTx_log(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ResponseCheckTx(Rest, 0, 0, F1, F2, F3,
					    TrUserData);
	    1 ->
		skip_64_ResponseCheckTx(Rest, 0, 0, F1, F2, F3,
					TrUserData);
	    2 ->
		skip_length_delimited_ResponseCheckTx(Rest, 0, 0, F1,
						      F2, F3, TrUserData);
	    5 ->
		skip_32_ResponseCheckTx(Rest, 0, 0, F1, F2, F3,
					TrUserData)
	  end
    end;
dg_read_field_def_ResponseCheckTx(<<>>, 0, 0, F1, F2,
				  F3, _) ->
    #'ResponseCheckTx'{code = F1, data = F2, log = F3}.

d_field_ResponseCheckTx_code(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_ResponseCheckTx_code(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, TrUserData);
d_field_ResponseCheckTx_code(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, F3, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_CodeType(Tmp),
    dfp_read_field_def_ResponseCheckTx(Rest, 0, 0,
				       NewFValue, F2, F3, TrUserData).


d_field_ResponseCheckTx_data(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_ResponseCheckTx_data(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, TrUserData);
d_field_ResponseCheckTx_data(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ResponseCheckTx(Rest2, 0, 0, F1,
				       NewFValue, F3, TrUserData).


d_field_ResponseCheckTx_log(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_ResponseCheckTx_log(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
d_field_ResponseCheckTx_log(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ResponseCheckTx(Rest2, 0, 0, F1, F2,
				       NewFValue, TrUserData).


skip_varint_ResponseCheckTx(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_ResponseCheckTx(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
skip_varint_ResponseCheckTx(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ResponseCheckTx(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


skip_length_delimited_ResponseCheckTx(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_ResponseCheckTx(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3,
					  TrUserData);
skip_length_delimited_ResponseCheckTx(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResponseCheckTx(Rest2, 0, 0, F1, F2,
				       F3, TrUserData).


skip_32_ResponseCheckTx(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ResponseCheckTx(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


skip_64_ResponseCheckTx(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ResponseCheckTx(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


d_msg_ResponseDeliverTx(Bin, TrUserData) ->
    dfp_read_field_def_ResponseDeliverTx(Bin, 0, 0,
					 id('OK', TrUserData),
					 id(<<>>, TrUserData),
					 id([], TrUserData), TrUserData).

dfp_read_field_def_ResponseDeliverTx(<<8, Rest/binary>>,
				     Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_ResponseDeliverTx_code(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData);
dfp_read_field_def_ResponseDeliverTx(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_ResponseDeliverTx_data(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData);
dfp_read_field_def_ResponseDeliverTx(<<26,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_ResponseDeliverTx_log(Rest, Z1, Z2, F1, F2, F3,
				  TrUserData);
dfp_read_field_def_ResponseDeliverTx(<<>>, 0, 0, F1, F2,
				     F3, _) ->
    #'ResponseDeliverTx'{code = F1, data = F2, log = F3};
dfp_read_field_def_ResponseDeliverTx(Other, Z1, Z2, F1,
				     F2, F3, TrUserData) ->
    dg_read_field_def_ResponseDeliverTx(Other, Z1, Z2, F1,
					F2, F3, TrUserData).

dg_read_field_def_ResponseDeliverTx(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ResponseDeliverTx(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_ResponseDeliverTx(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ResponseDeliverTx_code(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
      18 ->
	  d_field_ResponseDeliverTx_data(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
      26 ->
	  d_field_ResponseDeliverTx_log(Rest, 0, 0, F1, F2, F3,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ResponseDeliverTx(Rest, 0, 0, F1, F2, F3,
					      TrUserData);
	    1 ->
		skip_64_ResponseDeliverTx(Rest, 0, 0, F1, F2, F3,
					  TrUserData);
	    2 ->
		skip_length_delimited_ResponseDeliverTx(Rest, 0, 0, F1,
							F2, F3, TrUserData);
	    5 ->
		skip_32_ResponseDeliverTx(Rest, 0, 0, F1, F2, F3,
					  TrUserData)
	  end
    end;
dg_read_field_def_ResponseDeliverTx(<<>>, 0, 0, F1, F2,
				    F3, _) ->
    #'ResponseDeliverTx'{code = F1, data = F2, log = F3}.

d_field_ResponseDeliverTx_code(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_ResponseDeliverTx_code(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_ResponseDeliverTx_code(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2, F3, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_CodeType(Tmp),
    dfp_read_field_def_ResponseDeliverTx(Rest, 0, 0,
					 NewFValue, F2, F3, TrUserData).


d_field_ResponseDeliverTx_data(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_ResponseDeliverTx_data(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_ResponseDeliverTx_data(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ResponseDeliverTx(Rest2, 0, 0, F1,
					 NewFValue, F3, TrUserData).


d_field_ResponseDeliverTx_log(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_ResponseDeliverTx_log(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_ResponseDeliverTx_log(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ResponseDeliverTx(Rest2, 0, 0, F1,
					 F2, NewFValue, TrUserData).


skip_varint_ResponseDeliverTx(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_ResponseDeliverTx(Rest, Z1, Z2, F1, F2, F3,
				  TrUserData);
skip_varint_ResponseDeliverTx(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ResponseDeliverTx(Rest, Z1, Z2, F1,
					 F2, F3, TrUserData).


skip_length_delimited_ResponseDeliverTx(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_ResponseDeliverTx(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3,
					    TrUserData);
skip_length_delimited_ResponseDeliverTx(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResponseDeliverTx(Rest2, 0, 0, F1,
					 F2, F3, TrUserData).


skip_32_ResponseDeliverTx(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ResponseDeliverTx(Rest, Z1, Z2, F1,
					 F2, F3, TrUserData).


skip_64_ResponseDeliverTx(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ResponseDeliverTx(Rest, Z1, Z2, F1,
					 F2, F3, TrUserData).


d_msg_ResponseBeginBlock(Bin, TrUserData) ->
    dfp_read_field_def_ResponseBeginBlock(Bin, 0, 0,
					  TrUserData).

dfp_read_field_def_ResponseBeginBlock(<<>>, 0, 0, _) ->
    #'ResponseBeginBlock'{};
dfp_read_field_def_ResponseBeginBlock(Other, Z1, Z2,
				      TrUserData) ->
    dg_read_field_def_ResponseBeginBlock(Other, Z1, Z2,
					 TrUserData).

dg_read_field_def_ResponseBeginBlock(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ResponseBeginBlock(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
dg_read_field_def_ResponseBeginBlock(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_ResponseBeginBlock(Rest, 0, 0, TrUserData);
      1 -> skip_64_ResponseBeginBlock(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_ResponseBeginBlock(Rest, 0, 0,
						   TrUserData);
      5 -> skip_32_ResponseBeginBlock(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_ResponseBeginBlock(<<>>, 0, 0, _) ->
    #'ResponseBeginBlock'{}.

skip_varint_ResponseBeginBlock(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    skip_varint_ResponseBeginBlock(Rest, Z1, Z2,
				   TrUserData);
skip_varint_ResponseBeginBlock(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_ResponseBeginBlock(Rest, Z1, Z2,
					  TrUserData).


skip_length_delimited_ResponseBeginBlock(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_ResponseBeginBlock(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
skip_length_delimited_ResponseBeginBlock(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResponseBeginBlock(Rest2, 0, 0,
					  TrUserData).


skip_32_ResponseBeginBlock(<<_:32, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_ResponseBeginBlock(Rest, Z1, Z2,
					  TrUserData).


skip_64_ResponseBeginBlock(<<_:64, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_ResponseBeginBlock(Rest, Z1, Z2,
					  TrUserData).


d_msg_ResponseQuery(Bin, TrUserData) ->
    dfp_read_field_def_ResponseQuery(Bin, 0, 0,
				     id('OK', TrUserData), id(0, TrUserData),
				     id(<<>>, TrUserData), id(<<>>, TrUserData),
				     id(<<>>, TrUserData), id(0, TrUserData),
				     id([], TrUserData), TrUserData).

dfp_read_field_def_ResponseQuery(<<8, Rest/binary>>, Z1,
				 Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_ResponseQuery_code(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, TrUserData);
dfp_read_field_def_ResponseQuery(<<16, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				 TrUserData) ->
    d_field_ResponseQuery_index(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, TrUserData);
dfp_read_field_def_ResponseQuery(<<26, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				 TrUserData) ->
    d_field_ResponseQuery_key(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, TrUserData);
dfp_read_field_def_ResponseQuery(<<34, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				 TrUserData) ->
    d_field_ResponseQuery_value(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, TrUserData);
dfp_read_field_def_ResponseQuery(<<42, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				 TrUserData) ->
    d_field_ResponseQuery_proof(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, TrUserData);
dfp_read_field_def_ResponseQuery(<<48, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				 TrUserData) ->
    d_field_ResponseQuery_height(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, TrUserData);
dfp_read_field_def_ResponseQuery(<<58, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				 TrUserData) ->
    d_field_ResponseQuery_log(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, TrUserData);
dfp_read_field_def_ResponseQuery(<<>>, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, _) ->
    #'ResponseQuery'{code = F1, index = F2, key = F3,
		     value = F4, proof = F5, height = F6, log = F7};
dfp_read_field_def_ResponseQuery(Other, Z1, Z2, F1, F2,
				 F3, F4, F5, F6, F7, TrUserData) ->
    dg_read_field_def_ResponseQuery(Other, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, TrUserData).

dg_read_field_def_ResponseQuery(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ResponseQuery(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    TrUserData);
dg_read_field_def_ResponseQuery(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7,
				TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ResponseQuery_code(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, TrUserData);
      16 ->
	  d_field_ResponseQuery_index(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, TrUserData);
      26 ->
	  d_field_ResponseQuery_key(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, TrUserData);
      34 ->
	  d_field_ResponseQuery_value(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, TrUserData);
      42 ->
	  d_field_ResponseQuery_proof(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, TrUserData);
      48 ->
	  d_field_ResponseQuery_height(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, TrUserData);
      58 ->
	  d_field_ResponseQuery_log(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ResponseQuery(Rest, 0, 0, F1, F2, F3, F4,
					  F5, F6, F7, TrUserData);
	    1 ->
		skip_64_ResponseQuery(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7, TrUserData);
	    2 ->
		skip_length_delimited_ResponseQuery(Rest, 0, 0, F1, F2,
						    F3, F4, F5, F6, F7,
						    TrUserData);
	    5 ->
		skip_32_ResponseQuery(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7, TrUserData)
	  end
    end;
dg_read_field_def_ResponseQuery(<<>>, 0, 0, F1, F2, F3,
				F4, F5, F6, F7, _) ->
    #'ResponseQuery'{code = F1, index = F2, key = F3,
		     value = F4, proof = F5, height = F6, log = F7}.

d_field_ResponseQuery_code(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_ResponseQuery_code(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_ResponseQuery_code(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, F3, F4, F5, F6, F7, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_CodeType(Tmp),
    dfp_read_field_def_ResponseQuery(Rest, 0, 0, NewFValue,
				     F2, F3, F4, F5, F6, F7, TrUserData).


d_field_ResponseQuery_index(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_ResponseQuery_index(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_ResponseQuery_index(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, _, F3, F4, F5, F6, F7, TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_ResponseQuery(Rest, 0, 0, F1,
				     NewFValue, F3, F4, F5, F6, F7, TrUserData).


d_field_ResponseQuery_key(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_ResponseQuery_key(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_ResponseQuery_key(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, _, F4, F5, F6, F7, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ResponseQuery(Rest2, 0, 0, F1, F2,
				     NewFValue, F4, F5, F6, F7, TrUserData).


d_field_ResponseQuery_value(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_ResponseQuery_value(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_ResponseQuery_value(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, _, F5, F6, F7, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ResponseQuery(Rest2, 0, 0, F1, F2,
				     F3, NewFValue, F5, F6, F7, TrUserData).


d_field_ResponseQuery_proof(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_ResponseQuery_proof(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_ResponseQuery_proof(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, _, F6, F7, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ResponseQuery(Rest2, 0, 0, F1, F2,
				     F3, F4, NewFValue, F6, F7, TrUserData).


d_field_ResponseQuery_height(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_ResponseQuery_height(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_ResponseQuery_height(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, _, F7, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResponseQuery(Rest, 0, 0, F1, F2, F3,
				     F4, F5, NewFValue, F7, TrUserData).


d_field_ResponseQuery_log(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_ResponseQuery_log(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_ResponseQuery_log(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ResponseQuery(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, F6, NewFValue, TrUserData).


skip_varint_ResponseQuery(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    skip_varint_ResponseQuery(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, TrUserData);
skip_varint_ResponseQuery(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_ResponseQuery(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, TrUserData).


skip_length_delimited_ResponseQuery(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7,
				    TrUserData)
    when N < 57 ->
    skip_length_delimited_ResponseQuery(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, TrUserData);
skip_length_delimited_ResponseQuery(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7,
				    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResponseQuery(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, F6, F7, TrUserData).


skip_32_ResponseQuery(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_ResponseQuery(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, TrUserData).


skip_64_ResponseQuery(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_ResponseQuery(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, TrUserData).


d_msg_ResponseFlush(Bin, TrUserData) ->
    dfp_read_field_def_ResponseFlush(Bin, 0, 0, TrUserData).

dfp_read_field_def_ResponseFlush(<<>>, 0, 0, _) ->
    #'ResponseFlush'{};
dfp_read_field_def_ResponseFlush(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_ResponseFlush(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_ResponseFlush(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ResponseFlush(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_ResponseFlush(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_ResponseFlush(Rest, 0, 0, TrUserData);
      1 -> skip_64_ResponseFlush(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_ResponseFlush(Rest, 0, 0,
					      TrUserData);
      5 -> skip_32_ResponseFlush(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_ResponseFlush(<<>>, 0, 0, _) ->
    #'ResponseFlush'{}.

skip_varint_ResponseFlush(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_ResponseFlush(Rest, Z1, Z2, TrUserData);
skip_varint_ResponseFlush(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_ResponseFlush(Rest, Z1, Z2,
				     TrUserData).


skip_length_delimited_ResponseFlush(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_ResponseFlush(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_ResponseFlush(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResponseFlush(Rest2, 0, 0,
				     TrUserData).


skip_32_ResponseFlush(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_ResponseFlush(Rest, Z1, Z2,
				     TrUserData).


skip_64_ResponseFlush(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_ResponseFlush(Rest, Z1, Z2,
				     TrUserData).


d_msg_ResponseCommit(Bin, TrUserData) ->
    dfp_read_field_def_ResponseCommit(Bin, 0, 0,
				      id('OK', TrUserData),
				      id(<<>>, TrUserData), id([], TrUserData),
				      TrUserData).

dfp_read_field_def_ResponseCommit(<<8, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_ResponseCommit_code(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
dfp_read_field_def_ResponseCommit(<<18, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_ResponseCommit_data(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
dfp_read_field_def_ResponseCommit(<<26, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_ResponseCommit_log(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData);
dfp_read_field_def_ResponseCommit(<<>>, 0, 0, F1, F2,
				  F3, _) ->
    #'ResponseCommit'{code = F1, data = F2, log = F3};
dfp_read_field_def_ResponseCommit(Other, Z1, Z2, F1, F2,
				  F3, TrUserData) ->
    dg_read_field_def_ResponseCommit(Other, Z1, Z2, F1, F2,
				     F3, TrUserData).

dg_read_field_def_ResponseCommit(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ResponseCommit(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_ResponseCommit(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ResponseCommit_code(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
      18 ->
	  d_field_ResponseCommit_data(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
      26 ->
	  d_field_ResponseCommit_log(Rest, 0, 0, F1, F2, F3,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ResponseCommit(Rest, 0, 0, F1, F2, F3,
					   TrUserData);
	    1 ->
		skip_64_ResponseCommit(Rest, 0, 0, F1, F2, F3,
				       TrUserData);
	    2 ->
		skip_length_delimited_ResponseCommit(Rest, 0, 0, F1, F2,
						     F3, TrUserData);
	    5 ->
		skip_32_ResponseCommit(Rest, 0, 0, F1, F2, F3,
				       TrUserData)
	  end
    end;
dg_read_field_def_ResponseCommit(<<>>, 0, 0, F1, F2, F3,
				 _) ->
    #'ResponseCommit'{code = F1, data = F2, log = F3}.

d_field_ResponseCommit_code(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_ResponseCommit_code(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
d_field_ResponseCommit_code(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2, F3, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_CodeType(Tmp),
    dfp_read_field_def_ResponseCommit(Rest, 0, 0, NewFValue,
				      F2, F3, TrUserData).


d_field_ResponseCommit_data(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_ResponseCommit_data(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
d_field_ResponseCommit_data(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ResponseCommit(Rest2, 0, 0, F1,
				      NewFValue, F3, TrUserData).


d_field_ResponseCommit_log(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_ResponseCommit_log(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, TrUserData);
d_field_ResponseCommit_log(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ResponseCommit(Rest2, 0, 0, F1, F2,
				      NewFValue, TrUserData).


skip_varint_ResponseCommit(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_ResponseCommit(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData);
skip_varint_ResponseCommit(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ResponseCommit(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData).


skip_length_delimited_ResponseCommit(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_ResponseCommit(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_ResponseCommit(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResponseCommit(Rest2, 0, 0, F1, F2,
				      F3, TrUserData).


skip_32_ResponseCommit(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ResponseCommit(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData).


skip_64_ResponseCommit(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ResponseCommit(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData).


d_msg_ResponseEcho(Bin, TrUserData) ->
    dfp_read_field_def_ResponseEcho(Bin, 0, 0,
				    id([], TrUserData), TrUserData).

dfp_read_field_def_ResponseEcho(<<10, Rest/binary>>, Z1,
				Z2, F1, TrUserData) ->
    d_field_ResponseEcho_message(Rest, Z1, Z2, F1,
				 TrUserData);
dfp_read_field_def_ResponseEcho(<<>>, 0, 0, F1, _) ->
    #'ResponseEcho'{message = F1};
dfp_read_field_def_ResponseEcho(Other, Z1, Z2, F1,
				TrUserData) ->
    dg_read_field_def_ResponseEcho(Other, Z1, Z2, F1,
				   TrUserData).

dg_read_field_def_ResponseEcho(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ResponseEcho(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
dg_read_field_def_ResponseEcho(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ResponseEcho_message(Rest, 0, 0, F1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ResponseEcho(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_ResponseEcho(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_ResponseEcho(Rest, 0, 0, F1,
						   TrUserData);
	    5 -> skip_32_ResponseEcho(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_ResponseEcho(<<>>, 0, 0, F1, _) ->
    #'ResponseEcho'{message = F1}.

d_field_ResponseEcho_message(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_ResponseEcho_message(Rest, N + 7, X bsl N + Acc,
				 F1, TrUserData);
d_field_ResponseEcho_message(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ResponseEcho(Rest2, 0, 0, NewFValue,
				    TrUserData).


skip_varint_ResponseEcho(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, TrUserData) ->
    skip_varint_ResponseEcho(Rest, Z1, Z2, F1, TrUserData);
skip_varint_ResponseEcho(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, TrUserData) ->
    dfp_read_field_def_ResponseEcho(Rest, Z1, Z2, F1,
				    TrUserData).


skip_length_delimited_ResponseEcho(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ResponseEcho(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
skip_length_delimited_ResponseEcho(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResponseEcho(Rest2, 0, 0, F1,
				    TrUserData).


skip_32_ResponseEcho(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     TrUserData) ->
    dfp_read_field_def_ResponseEcho(Rest, Z1, Z2, F1,
				    TrUserData).


skip_64_ResponseEcho(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     TrUserData) ->
    dfp_read_field_def_ResponseEcho(Rest, Z1, Z2, F1,
				    TrUserData).


d_msg_ResponseException(Bin, TrUserData) ->
    dfp_read_field_def_ResponseException(Bin, 0, 0,
					 id([], TrUserData), TrUserData).

dfp_read_field_def_ResponseException(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, TrUserData) ->
    d_field_ResponseException_error(Rest, Z1, Z2, F1,
				    TrUserData);
dfp_read_field_def_ResponseException(<<>>, 0, 0, F1,
				     _) ->
    #'ResponseException'{error = F1};
dfp_read_field_def_ResponseException(Other, Z1, Z2, F1,
				     TrUserData) ->
    dg_read_field_def_ResponseException(Other, Z1, Z2, F1,
					TrUserData).

dg_read_field_def_ResponseException(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ResponseException(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
dg_read_field_def_ResponseException(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ResponseException_error(Rest, 0, 0, F1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ResponseException(Rest, 0, 0, F1,
					      TrUserData);
	    1 ->
		skip_64_ResponseException(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_ResponseException(Rest, 0, 0, F1,
							TrUserData);
	    5 ->
		skip_32_ResponseException(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_ResponseException(<<>>, 0, 0, F1,
				    _) ->
    #'ResponseException'{error = F1}.

d_field_ResponseException_error(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_ResponseException_error(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
d_field_ResponseException_error(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ResponseException(Rest2, 0, 0,
					 NewFValue, TrUserData).


skip_varint_ResponseException(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, TrUserData) ->
    skip_varint_ResponseException(Rest, Z1, Z2, F1,
				  TrUserData);
skip_varint_ResponseException(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_ResponseException(Rest, Z1, Z2, F1,
					 TrUserData).


skip_length_delimited_ResponseException(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ResponseException(Rest, N + 7,
					    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_ResponseException(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResponseException(Rest2, 0, 0, F1,
					 TrUserData).


skip_32_ResponseException(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    dfp_read_field_def_ResponseException(Rest, Z1, Z2, F1,
					 TrUserData).


skip_64_ResponseException(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    dfp_read_field_def_ResponseException(Rest, Z1, Z2, F1,
					 TrUserData).


d_msg_Response(Bin, TrUserData) ->
    dfp_read_field_def_Response(Bin, 0, 0,
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Response(<<10, Rest/binary>>, Z1, Z2,
			    F1, TrUserData) ->
    d_field_Response_exception(Rest, Z1, Z2, F1,
			       TrUserData);
dfp_read_field_def_Response(<<18, Rest/binary>>, Z1, Z2,
			    F1, TrUserData) ->
    d_field_Response_echo(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_Response(<<26, Rest/binary>>, Z1, Z2,
			    F1, TrUserData) ->
    d_field_Response_flush(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_Response(<<34, Rest/binary>>, Z1, Z2,
			    F1, TrUserData) ->
    d_field_Response_info(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_Response(<<42, Rest/binary>>, Z1, Z2,
			    F1, TrUserData) ->
    d_field_Response_set_option(Rest, Z1, Z2, F1,
				TrUserData);
dfp_read_field_def_Response(<<50, Rest/binary>>, Z1, Z2,
			    F1, TrUserData) ->
    d_field_Response_deliver_tx(Rest, Z1, Z2, F1,
				TrUserData);
dfp_read_field_def_Response(<<58, Rest/binary>>, Z1, Z2,
			    F1, TrUserData) ->
    d_field_Response_check_tx(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_Response(<<66, Rest/binary>>, Z1, Z2,
			    F1, TrUserData) ->
    d_field_Response_commit(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_Response(<<74, Rest/binary>>, Z1, Z2,
			    F1, TrUserData) ->
    d_field_Response_query(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_Response(<<82, Rest/binary>>, Z1, Z2,
			    F1, TrUserData) ->
    d_field_Response_init_chain(Rest, Z1, Z2, F1,
				TrUserData);
dfp_read_field_def_Response(<<90, Rest/binary>>, Z1, Z2,
			    F1, TrUserData) ->
    d_field_Response_begin_block(Rest, Z1, Z2, F1,
				 TrUserData);
dfp_read_field_def_Response(<<98, Rest/binary>>, Z1, Z2,
			    F1, TrUserData) ->
    d_field_Response_end_block(Rest, Z1, Z2, F1,
			       TrUserData);
dfp_read_field_def_Response(<<>>, 0, 0, F1, _) ->
    #'Response'{value = F1};
dfp_read_field_def_Response(Other, Z1, Z2, F1,
			    TrUserData) ->
    dg_read_field_def_Response(Other, Z1, Z2, F1,
			       TrUserData).

dg_read_field_def_Response(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Response(Rest, N + 7, X bsl N + Acc,
			       F1, TrUserData);
dg_read_field_def_Response(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Response_exception(Rest, 0, 0, F1, TrUserData);
      18 -> d_field_Response_echo(Rest, 0, 0, F1, TrUserData);
      26 ->
	  d_field_Response_flush(Rest, 0, 0, F1, TrUserData);
      34 -> d_field_Response_info(Rest, 0, 0, F1, TrUserData);
      42 ->
	  d_field_Response_set_option(Rest, 0, 0, F1, TrUserData);
      50 ->
	  d_field_Response_deliver_tx(Rest, 0, 0, F1, TrUserData);
      58 ->
	  d_field_Response_check_tx(Rest, 0, 0, F1, TrUserData);
      66 ->
	  d_field_Response_commit(Rest, 0, 0, F1, TrUserData);
      74 ->
	  d_field_Response_query(Rest, 0, 0, F1, TrUserData);
      82 ->
	  d_field_Response_init_chain(Rest, 0, 0, F1, TrUserData);
      90 ->
	  d_field_Response_begin_block(Rest, 0, 0, F1,
				       TrUserData);
      98 ->
	  d_field_Response_end_block(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Response(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_Response(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_Response(Rest, 0, 0, F1,
					       TrUserData);
	    5 -> skip_32_Response(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_Response(<<>>, 0, 0, F1, _) ->
    #'Response'{value = F1}.

d_field_Response_exception(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData)
    when N < 57 ->
    d_field_Response_exception(Rest, N + 7, X bsl N + Acc,
			       F1, TrUserData);
d_field_Response_exception(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ResponseException(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Response(Rest2, 0, 0,
				case F1 of
				  undefined -> {exception, NewFValue};
				  {exception, MVF1} ->
				      {exception,
				       merge_msg_ResponseException(MVF1,
								   NewFValue,
								   TrUserData)};
				  _ -> {exception, NewFValue}
				end,
				TrUserData).


d_field_Response_echo(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, TrUserData)
    when N < 57 ->
    d_field_Response_echo(Rest, N + 7, X bsl N + Acc, F1,
			  TrUserData);
d_field_Response_echo(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ResponseEcho(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Response(Rest2, 0, 0,
				case F1 of
				  undefined -> {echo, NewFValue};
				  {echo, MVF1} ->
				      {echo,
				       merge_msg_ResponseEcho(MVF1, NewFValue,
							      TrUserData)};
				  _ -> {echo, NewFValue}
				end,
				TrUserData).


d_field_Response_flush(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, TrUserData)
    when N < 57 ->
    d_field_Response_flush(Rest, N + 7, X bsl N + Acc, F1,
			   TrUserData);
d_field_Response_flush(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ResponseFlush(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Response(Rest2, 0, 0,
				case F1 of
				  undefined -> {flush, NewFValue};
				  {flush, MVF1} ->
				      {flush,
				       merge_msg_ResponseFlush(MVF1, NewFValue,
							       TrUserData)};
				  _ -> {flush, NewFValue}
				end,
				TrUserData).


d_field_Response_info(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, TrUserData)
    when N < 57 ->
    d_field_Response_info(Rest, N + 7, X bsl N + Acc, F1,
			  TrUserData);
d_field_Response_info(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ResponseInfo(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Response(Rest2, 0, 0,
				case F1 of
				  undefined -> {info, NewFValue};
				  {info, MVF1} ->
				      {info,
				       merge_msg_ResponseInfo(MVF1, NewFValue,
							      TrUserData)};
				  _ -> {info, NewFValue}
				end,
				TrUserData).


d_field_Response_set_option(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_Response_set_option(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
d_field_Response_set_option(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ResponseSetOption(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Response(Rest2, 0, 0,
				case F1 of
				  undefined -> {set_option, NewFValue};
				  {set_option, MVF1} ->
				      {set_option,
				       merge_msg_ResponseSetOption(MVF1,
								   NewFValue,
								   TrUserData)};
				  _ -> {set_option, NewFValue}
				end,
				TrUserData).


d_field_Response_deliver_tx(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_Response_deliver_tx(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
d_field_Response_deliver_tx(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ResponseDeliverTx(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Response(Rest2, 0, 0,
				case F1 of
				  undefined -> {deliver_tx, NewFValue};
				  {deliver_tx, MVF1} ->
				      {deliver_tx,
				       merge_msg_ResponseDeliverTx(MVF1,
								   NewFValue,
								   TrUserData)};
				  _ -> {deliver_tx, NewFValue}
				end,
				TrUserData).


d_field_Response_check_tx(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData)
    when N < 57 ->
    d_field_Response_check_tx(Rest, N + 7, X bsl N + Acc,
			      F1, TrUserData);
d_field_Response_check_tx(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ResponseCheckTx(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Response(Rest2, 0, 0,
				case F1 of
				  undefined -> {check_tx, NewFValue};
				  {check_tx, MVF1} ->
				      {check_tx,
				       merge_msg_ResponseCheckTx(MVF1,
								 NewFValue,
								 TrUserData)};
				  _ -> {check_tx, NewFValue}
				end,
				TrUserData).


d_field_Response_commit(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, TrUserData)
    when N < 57 ->
    d_field_Response_commit(Rest, N + 7, X bsl N + Acc, F1,
			    TrUserData);
d_field_Response_commit(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ResponseCommit(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Response(Rest2, 0, 0,
				case F1 of
				  undefined -> {commit, NewFValue};
				  {commit, MVF1} ->
				      {commit,
				       merge_msg_ResponseCommit(MVF1, NewFValue,
								TrUserData)};
				  _ -> {commit, NewFValue}
				end,
				TrUserData).


d_field_Response_query(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, TrUserData)
    when N < 57 ->
    d_field_Response_query(Rest, N + 7, X bsl N + Acc, F1,
			   TrUserData);
d_field_Response_query(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ResponseQuery(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Response(Rest2, 0, 0,
				case F1 of
				  undefined -> {query, NewFValue};
				  {query, MVF1} ->
				      {query,
				       merge_msg_ResponseQuery(MVF1, NewFValue,
							       TrUserData)};
				  _ -> {query, NewFValue}
				end,
				TrUserData).


d_field_Response_init_chain(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_Response_init_chain(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
d_field_Response_init_chain(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ResponseInitChain(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Response(Rest2, 0, 0,
				case F1 of
				  undefined -> {init_chain, NewFValue};
				  {init_chain, MVF1} ->
				      {init_chain,
				       merge_msg_ResponseInitChain(MVF1,
								   NewFValue,
								   TrUserData)};
				  _ -> {init_chain, NewFValue}
				end,
				TrUserData).


d_field_Response_begin_block(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_Response_begin_block(Rest, N + 7, X bsl N + Acc,
				 F1, TrUserData);
d_field_Response_begin_block(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ResponseBeginBlock(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Response(Rest2, 0, 0,
				case F1 of
				  undefined -> {begin_block, NewFValue};
				  {begin_block, MVF1} ->
				      {begin_block,
				       merge_msg_ResponseBeginBlock(MVF1,
								    NewFValue,
								    TrUserData)};
				  _ -> {begin_block, NewFValue}
				end,
				TrUserData).


d_field_Response_end_block(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData)
    when N < 57 ->
    d_field_Response_end_block(Rest, N + 7, X bsl N + Acc,
			       F1, TrUserData);
d_field_Response_end_block(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ResponseEndBlock(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Response(Rest2, 0, 0,
				case F1 of
				  undefined -> {end_block, NewFValue};
				  {end_block, MVF1} ->
				      {end_block,
				       merge_msg_ResponseEndBlock(MVF1,
								  NewFValue,
								  TrUserData)};
				  _ -> {end_block, NewFValue}
				end,
				TrUserData).


skip_varint_Response(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, TrUserData) ->
    skip_varint_Response(Rest, Z1, Z2, F1, TrUserData);
skip_varint_Response(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F1,
				TrUserData).


skip_length_delimited_Response(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Response(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
skip_length_delimited_Response(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Response(Rest2, 0, 0, F1,
				TrUserData).


skip_32_Response(<<_:32, Rest/binary>>, Z1, Z2, F1,
		 TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F1,
				TrUserData).


skip_64_Response(<<_:64, Rest/binary>>, Z1, Z2, F1,
		 TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F1,
				TrUserData).




d_enum_CodeType(0) -> 'OK';
d_enum_CodeType(1) -> 'InternalError';
d_enum_CodeType(2) -> 'EncodingError';
d_enum_CodeType(3) -> 'BadNonce';
d_enum_CodeType(4) -> 'Unauthorized';
d_enum_CodeType(5) -> 'InsufficientFunds';
d_enum_CodeType(6) -> 'UnknownRequest';
d_enum_CodeType(101) -> 'BaseDuplicateAddress';
d_enum_CodeType(102) -> 'BaseEncodingError';
d_enum_CodeType(103) -> 'BaseInsufficientFees';
d_enum_CodeType(104) -> 'BaseInsufficientFunds';
d_enum_CodeType(105) -> 'BaseInsufficientGasPrice';
d_enum_CodeType(106) -> 'BaseInvalidInput';
d_enum_CodeType(107) -> 'BaseInvalidOutput';
d_enum_CodeType(108) -> 'BaseInvalidPubKey';
d_enum_CodeType(109) -> 'BaseInvalidSequence';
d_enum_CodeType(110) -> 'BaseInvalidSignature';
d_enum_CodeType(111) -> 'BaseUnknownAddress';
d_enum_CodeType(112) -> 'BaseUnknownPubKey';
d_enum_CodeType(113) -> 'BaseUnknownPlugin';
d_enum_CodeType(201) -> 'GovUnknownEntity';
d_enum_CodeType(202) -> 'GovUnknownGroup';
d_enum_CodeType(203) -> 'GovUnknownProposal';
d_enum_CodeType(204) -> 'GovDuplicateGroup';
d_enum_CodeType(205) -> 'GovDuplicateMember';
d_enum_CodeType(206) -> 'GovDuplicateProposal';
d_enum_CodeType(207) -> 'GovDuplicateVote';
d_enum_CodeType(208) -> 'GovInvalidMember';
d_enum_CodeType(209) -> 'GovInvalidVote';
d_enum_CodeType(210) -> 'GovInvalidVotingPower';
d_enum_CodeType(V) -> V.



merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'RequestInfo'{} ->
	  merge_msg_RequestInfo(Prev, New, TrUserData);
      #'ResponseInitChain'{} ->
	  merge_msg_ResponseInitChain(Prev, New, TrUserData);
      #'PartSetHeader'{} ->
	  merge_msg_PartSetHeader(Prev, New, TrUserData);
      #'BlockID'{} ->
	  merge_msg_BlockID(Prev, New, TrUserData);
      #'Header'{} -> merge_msg_Header(Prev, New, TrUserData);
      #'RequestBeginBlock'{} ->
	  merge_msg_RequestBeginBlock(Prev, New, TrUserData);
      #'Validator'{} ->
	  merge_msg_Validator(Prev, New, TrUserData);
      #'ResponseEndBlock'{} ->
	  merge_msg_ResponseEndBlock(Prev, New, TrUserData);
      #'RequestDeliverTx'{} ->
	  merge_msg_RequestDeliverTx(Prev, New, TrUserData);
      #'RequestCheckTx'{} ->
	  merge_msg_RequestCheckTx(Prev, New, TrUserData);
      #'RequestCommit'{} ->
	  merge_msg_RequestCommit(Prev, New, TrUserData);
      #'RequestEndBlock'{} ->
	  merge_msg_RequestEndBlock(Prev, New, TrUserData);
      #'RequestInitChain'{} ->
	  merge_msg_RequestInitChain(Prev, New, TrUserData);
      #'RequestQuery'{} ->
	  merge_msg_RequestQuery(Prev, New, TrUserData);
      #'RequestSetOption'{} ->
	  merge_msg_RequestSetOption(Prev, New, TrUserData);
      #'RequestFlush'{} ->
	  merge_msg_RequestFlush(Prev, New, TrUserData);
      #'RequestEcho'{} ->
	  merge_msg_RequestEcho(Prev, New, TrUserData);
      #'Request'{} ->
	  merge_msg_Request(Prev, New, TrUserData);
      #'ResponseInfo'{} ->
	  merge_msg_ResponseInfo(Prev, New, TrUserData);
      #'ResponseSetOption'{} ->
	  merge_msg_ResponseSetOption(Prev, New, TrUserData);
      #'ResponseCheckTx'{} ->
	  merge_msg_ResponseCheckTx(Prev, New, TrUserData);
      #'ResponseDeliverTx'{} ->
	  merge_msg_ResponseDeliverTx(Prev, New, TrUserData);
      #'ResponseBeginBlock'{} ->
	  merge_msg_ResponseBeginBlock(Prev, New, TrUserData);
      #'ResponseQuery'{} ->
	  merge_msg_ResponseQuery(Prev, New, TrUserData);
      #'ResponseFlush'{} ->
	  merge_msg_ResponseFlush(Prev, New, TrUserData);
      #'ResponseCommit'{} ->
	  merge_msg_ResponseCommit(Prev, New, TrUserData);
      #'ResponseEcho'{} ->
	  merge_msg_ResponseEcho(Prev, New, TrUserData);
      #'ResponseException'{} ->
	  merge_msg_ResponseException(Prev, New, TrUserData);
      #'Response'{} ->
	  merge_msg_Response(Prev, New, TrUserData)
    end.

merge_msg_RequestInfo(_Prev, New, _TrUserData) -> New.

merge_msg_ResponseInitChain(_Prev, New, _TrUserData) ->
    New.

merge_msg_PartSetHeader(#'PartSetHeader'{total =
					     PFtotal,
					 hash = PFhash},
			#'PartSetHeader'{total = NFtotal, hash = NFhash}, _) ->
    #'PartSetHeader'{total =
			 if NFtotal =:= undefined -> PFtotal;
			    true -> NFtotal
			 end,
		     hash =
			 if NFhash =:= undefined -> PFhash;
			    true -> NFhash
			 end}.

merge_msg_BlockID(#'BlockID'{hash = PFhash,
			     parts = PFparts},
		  #'BlockID'{hash = NFhash, parts = NFparts},
		  TrUserData) ->
    #'BlockID'{hash =
		   if NFhash =:= undefined -> PFhash;
		      true -> NFhash
		   end,
	       parts =
		   if PFparts /= undefined, NFparts /= undefined ->
			  merge_msg_PartSetHeader(PFparts, NFparts, TrUserData);
		      PFparts == undefined -> NFparts;
		      NFparts == undefined -> PFparts
		   end}.

merge_msg_Header(#'Header'{chain_id = PFchain_id,
			   height = PFheight, time = PFtime,
			   num_txs = PFnum_txs, last_block_id = PFlast_block_id,
			   last_commit_hash = PFlast_commit_hash,
			   data_hash = PFdata_hash,
			   validators_hash = PFvalidators_hash,
			   app_hash = PFapp_hash},
		 #'Header'{chain_id = NFchain_id, height = NFheight,
			   time = NFtime, num_txs = NFnum_txs,
			   last_block_id = NFlast_block_id,
			   last_commit_hash = NFlast_commit_hash,
			   data_hash = NFdata_hash,
			   validators_hash = NFvalidators_hash,
			   app_hash = NFapp_hash},
		 TrUserData) ->
    #'Header'{chain_id =
		  if NFchain_id =:= undefined -> PFchain_id;
		     true -> NFchain_id
		  end,
	      height =
		  if NFheight =:= undefined -> PFheight;
		     true -> NFheight
		  end,
	      time =
		  if NFtime =:= undefined -> PFtime;
		     true -> NFtime
		  end,
	      num_txs =
		  if NFnum_txs =:= undefined -> PFnum_txs;
		     true -> NFnum_txs
		  end,
	      last_block_id =
		  if PFlast_block_id /= undefined,
		     NFlast_block_id /= undefined ->
			 merge_msg_BlockID(PFlast_block_id, NFlast_block_id,
					   TrUserData);
		     PFlast_block_id == undefined -> NFlast_block_id;
		     NFlast_block_id == undefined -> PFlast_block_id
		  end,
	      last_commit_hash =
		  if NFlast_commit_hash =:= undefined ->
			 PFlast_commit_hash;
		     true -> NFlast_commit_hash
		  end,
	      data_hash =
		  if NFdata_hash =:= undefined -> PFdata_hash;
		     true -> NFdata_hash
		  end,
	      validators_hash =
		  if NFvalidators_hash =:= undefined -> PFvalidators_hash;
		     true -> NFvalidators_hash
		  end,
	      app_hash =
		  if NFapp_hash =:= undefined -> PFapp_hash;
		     true -> NFapp_hash
		  end}.

merge_msg_RequestBeginBlock(#'RequestBeginBlock'{hash =
						     PFhash,
						 header = PFheader},
			    #'RequestBeginBlock'{hash = NFhash,
						 header = NFheader},
			    TrUserData) ->
    #'RequestBeginBlock'{hash =
			     if NFhash =:= undefined -> PFhash;
				true -> NFhash
			     end,
			 header =
			     if PFheader /= undefined, NFheader /= undefined ->
				    merge_msg_Header(PFheader, NFheader,
						     TrUserData);
				PFheader == undefined -> NFheader;
				NFheader == undefined -> PFheader
			     end}.

merge_msg_Validator(#'Validator'{pubKey = PFpubKey,
				 power = PFpower},
		    #'Validator'{pubKey = NFpubKey, power = NFpower}, _) ->
    #'Validator'{pubKey =
		     if NFpubKey =:= undefined -> PFpubKey;
			true -> NFpubKey
		     end,
		 power =
		     if NFpower =:= undefined -> PFpower;
			true -> NFpower
		     end}.

merge_msg_ResponseEndBlock(#'ResponseEndBlock'{diffs =
						   PFdiffs},
			   #'ResponseEndBlock'{diffs = NFdiffs}, TrUserData) ->
    #'ResponseEndBlock'{diffs =
			    'erlang_++'(PFdiffs, NFdiffs, TrUserData)}.

merge_msg_RequestDeliverTx(#'RequestDeliverTx'{tx =
						   PFtx},
			   #'RequestDeliverTx'{tx = NFtx}, _) ->
    #'RequestDeliverTx'{tx =
			    if NFtx =:= undefined -> PFtx;
			       true -> NFtx
			    end}.

merge_msg_RequestCheckTx(#'RequestCheckTx'{tx = PFtx},
			 #'RequestCheckTx'{tx = NFtx}, _) ->
    #'RequestCheckTx'{tx =
			  if NFtx =:= undefined -> PFtx;
			     true -> NFtx
			  end}.

merge_msg_RequestCommit(_Prev, New, _TrUserData) -> New.

merge_msg_RequestEndBlock(#'RequestEndBlock'{height =
						 PFheight},
			  #'RequestEndBlock'{height = NFheight}, _) ->
    #'RequestEndBlock'{height =
			   if NFheight =:= undefined -> PFheight;
			      true -> NFheight
			   end}.

merge_msg_RequestInitChain(#'RequestInitChain'{validators
						   = PFvalidators},
			   #'RequestInitChain'{validators = NFvalidators},
			   TrUserData) ->
    #'RequestInitChain'{validators =
			    'erlang_++'(PFvalidators, NFvalidators,
					TrUserData)}.

merge_msg_RequestQuery(#'RequestQuery'{data = PFdata,
				       path = PFpath, height = PFheight,
				       prove = PFprove},
		       #'RequestQuery'{data = NFdata, path = NFpath,
				       height = NFheight, prove = NFprove},
		       _) ->
    #'RequestQuery'{data =
			if NFdata =:= undefined -> PFdata;
			   true -> NFdata
			end,
		    path =
			if NFpath =:= undefined -> PFpath;
			   true -> NFpath
			end,
		    height =
			if NFheight =:= undefined -> PFheight;
			   true -> NFheight
			end,
		    prove =
			if NFprove =:= undefined -> PFprove;
			   true -> NFprove
			end}.

merge_msg_RequestSetOption(#'RequestSetOption'{key =
						   PFkey,
					       value = PFvalue},
			   #'RequestSetOption'{key = NFkey, value = NFvalue},
			   _) ->
    #'RequestSetOption'{key =
			    if NFkey =:= undefined -> PFkey;
			       true -> NFkey
			    end,
			value =
			    if NFvalue =:= undefined -> PFvalue;
			       true -> NFvalue
			    end}.

merge_msg_RequestFlush(_Prev, New, _TrUserData) -> New.

merge_msg_RequestEcho(#'RequestEcho'{message =
					 PFmessage},
		      #'RequestEcho'{message = NFmessage}, _) ->
    #'RequestEcho'{message =
		       if NFmessage =:= undefined -> PFmessage;
			  true -> NFmessage
		       end}.

merge_msg_Request(#'Request'{value = PFvalue},
		  #'Request'{value = NFvalue}, TrUserData) ->
    #'Request'{value =
		   case {PFvalue, NFvalue} of
		     {{echo, OPFvalue}, {echo, ONFvalue}} ->
			 {echo,
			  merge_msg_RequestEcho(OPFvalue, ONFvalue,
						TrUserData)};
		     {{flush, OPFvalue}, {flush, ONFvalue}} ->
			 {flush,
			  merge_msg_RequestFlush(OPFvalue, ONFvalue,
						 TrUserData)};
		     {{info, OPFvalue}, {info, ONFvalue}} ->
			 {info,
			  merge_msg_RequestInfo(OPFvalue, ONFvalue,
						TrUserData)};
		     {{set_option, OPFvalue}, {set_option, ONFvalue}} ->
			 {set_option,
			  merge_msg_RequestSetOption(OPFvalue, ONFvalue,
						     TrUserData)};
		     {{deliver_tx, OPFvalue}, {deliver_tx, ONFvalue}} ->
			 {deliver_tx,
			  merge_msg_RequestDeliverTx(OPFvalue, ONFvalue,
						     TrUserData)};
		     {{check_tx, OPFvalue}, {check_tx, ONFvalue}} ->
			 {check_tx,
			  merge_msg_RequestCheckTx(OPFvalue, ONFvalue,
						   TrUserData)};
		     {{commit, OPFvalue}, {commit, ONFvalue}} ->
			 {commit,
			  merge_msg_RequestCommit(OPFvalue, ONFvalue,
						  TrUserData)};
		     {{query, OPFvalue}, {query, ONFvalue}} ->
			 {query,
			  merge_msg_RequestQuery(OPFvalue, ONFvalue,
						 TrUserData)};
		     {{init_chain, OPFvalue}, {init_chain, ONFvalue}} ->
			 {init_chain,
			  merge_msg_RequestInitChain(OPFvalue, ONFvalue,
						     TrUserData)};
		     {{begin_block, OPFvalue}, {begin_block, ONFvalue}} ->
			 {begin_block,
			  merge_msg_RequestBeginBlock(OPFvalue, ONFvalue,
						      TrUserData)};
		     {{end_block, OPFvalue}, {end_block, ONFvalue}} ->
			 {end_block,
			  merge_msg_RequestEndBlock(OPFvalue, ONFvalue,
						    TrUserData)};
		     {_, undefined} -> PFvalue;
		     _ -> NFvalue
		   end}.

merge_msg_ResponseInfo(#'ResponseInfo'{data = PFdata,
				       version = PFversion,
				       last_block_height = PFlast_block_height,
				       last_block_app_hash =
					   PFlast_block_app_hash},
		       #'ResponseInfo'{data = NFdata, version = NFversion,
				       last_block_height = NFlast_block_height,
				       last_block_app_hash =
					   NFlast_block_app_hash},
		       _) ->
    #'ResponseInfo'{data =
			if NFdata =:= undefined -> PFdata;
			   true -> NFdata
			end,
		    version =
			if NFversion =:= undefined -> PFversion;
			   true -> NFversion
			end,
		    last_block_height =
			if NFlast_block_height =:= undefined ->
			       PFlast_block_height;
			   true -> NFlast_block_height
			end,
		    last_block_app_hash =
			if NFlast_block_app_hash =:= undefined ->
			       PFlast_block_app_hash;
			   true -> NFlast_block_app_hash
			end}.

merge_msg_ResponseSetOption(#'ResponseSetOption'{log =
						     PFlog},
			    #'ResponseSetOption'{log = NFlog}, _) ->
    #'ResponseSetOption'{log =
			     if NFlog =:= undefined -> PFlog;
				true -> NFlog
			     end}.

merge_msg_ResponseCheckTx(#'ResponseCheckTx'{code =
						 PFcode,
					     data = PFdata, log = PFlog},
			  #'ResponseCheckTx'{code = NFcode, data = NFdata,
					     log = NFlog},
			  _) ->
    #'ResponseCheckTx'{code =
			   if NFcode =:= undefined -> PFcode;
			      true -> NFcode
			   end,
		       data =
			   if NFdata =:= undefined -> PFdata;
			      true -> NFdata
			   end,
		       log =
			   if NFlog =:= undefined -> PFlog;
			      true -> NFlog
			   end}.

merge_msg_ResponseDeliverTx(#'ResponseDeliverTx'{code =
						     PFcode,
						 data = PFdata, log = PFlog},
			    #'ResponseDeliverTx'{code = NFcode, data = NFdata,
						 log = NFlog},
			    _) ->
    #'ResponseDeliverTx'{code =
			     if NFcode =:= undefined -> PFcode;
				true -> NFcode
			     end,
			 data =
			     if NFdata =:= undefined -> PFdata;
				true -> NFdata
			     end,
			 log =
			     if NFlog =:= undefined -> PFlog;
				true -> NFlog
			     end}.

merge_msg_ResponseBeginBlock(_Prev, New, _TrUserData) ->
    New.

merge_msg_ResponseQuery(#'ResponseQuery'{code = PFcode,
					 index = PFindex, key = PFkey,
					 value = PFvalue, proof = PFproof,
					 height = PFheight, log = PFlog},
			#'ResponseQuery'{code = NFcode, index = NFindex,
					 key = NFkey, value = NFvalue,
					 proof = NFproof, height = NFheight,
					 log = NFlog},
			_) ->
    #'ResponseQuery'{code =
			 if NFcode =:= undefined -> PFcode;
			    true -> NFcode
			 end,
		     index =
			 if NFindex =:= undefined -> PFindex;
			    true -> NFindex
			 end,
		     key =
			 if NFkey =:= undefined -> PFkey;
			    true -> NFkey
			 end,
		     value =
			 if NFvalue =:= undefined -> PFvalue;
			    true -> NFvalue
			 end,
		     proof =
			 if NFproof =:= undefined -> PFproof;
			    true -> NFproof
			 end,
		     height =
			 if NFheight =:= undefined -> PFheight;
			    true -> NFheight
			 end,
		     log =
			 if NFlog =:= undefined -> PFlog;
			    true -> NFlog
			 end}.

merge_msg_ResponseFlush(_Prev, New, _TrUserData) -> New.

merge_msg_ResponseCommit(#'ResponseCommit'{code =
					       PFcode,
					   data = PFdata, log = PFlog},
			 #'ResponseCommit'{code = NFcode, data = NFdata,
					   log = NFlog},
			 _) ->
    #'ResponseCommit'{code =
			  if NFcode =:= undefined -> PFcode;
			     true -> NFcode
			  end,
		      data =
			  if NFdata =:= undefined -> PFdata;
			     true -> NFdata
			  end,
		      log =
			  if NFlog =:= undefined -> PFlog;
			     true -> NFlog
			  end}.

merge_msg_ResponseEcho(#'ResponseEcho'{message =
					   PFmessage},
		       #'ResponseEcho'{message = NFmessage}, _) ->
    #'ResponseEcho'{message =
			if NFmessage =:= undefined -> PFmessage;
			   true -> NFmessage
			end}.

merge_msg_ResponseException(#'ResponseException'{error =
						     PFerror},
			    #'ResponseException'{error = NFerror}, _) ->
    #'ResponseException'{error =
			     if NFerror =:= undefined -> PFerror;
				true -> NFerror
			     end}.

merge_msg_Response(#'Response'{value = PFvalue},
		   #'Response'{value = NFvalue}, TrUserData) ->
    #'Response'{value =
		    case {PFvalue, NFvalue} of
		      {{exception, OPFvalue}, {exception, ONFvalue}} ->
			  {exception,
			   merge_msg_ResponseException(OPFvalue, ONFvalue,
						       TrUserData)};
		      {{echo, OPFvalue}, {echo, ONFvalue}} ->
			  {echo,
			   merge_msg_ResponseEcho(OPFvalue, ONFvalue,
						  TrUserData)};
		      {{flush, OPFvalue}, {flush, ONFvalue}} ->
			  {flush,
			   merge_msg_ResponseFlush(OPFvalue, ONFvalue,
						   TrUserData)};
		      {{info, OPFvalue}, {info, ONFvalue}} ->
			  {info,
			   merge_msg_ResponseInfo(OPFvalue, ONFvalue,
						  TrUserData)};
		      {{set_option, OPFvalue}, {set_option, ONFvalue}} ->
			  {set_option,
			   merge_msg_ResponseSetOption(OPFvalue, ONFvalue,
						       TrUserData)};
		      {{deliver_tx, OPFvalue}, {deliver_tx, ONFvalue}} ->
			  {deliver_tx,
			   merge_msg_ResponseDeliverTx(OPFvalue, ONFvalue,
						       TrUserData)};
		      {{check_tx, OPFvalue}, {check_tx, ONFvalue}} ->
			  {check_tx,
			   merge_msg_ResponseCheckTx(OPFvalue, ONFvalue,
						     TrUserData)};
		      {{commit, OPFvalue}, {commit, ONFvalue}} ->
			  {commit,
			   merge_msg_ResponseCommit(OPFvalue, ONFvalue,
						    TrUserData)};
		      {{query, OPFvalue}, {query, ONFvalue}} ->
			  {query,
			   merge_msg_ResponseQuery(OPFvalue, ONFvalue,
						   TrUserData)};
		      {{init_chain, OPFvalue}, {init_chain, ONFvalue}} ->
			  {init_chain,
			   merge_msg_ResponseInitChain(OPFvalue, ONFvalue,
						       TrUserData)};
		      {{begin_block, OPFvalue}, {begin_block, ONFvalue}} ->
			  {begin_block,
			   merge_msg_ResponseBeginBlock(OPFvalue, ONFvalue,
							TrUserData)};
		      {{end_block, OPFvalue}, {end_block, ONFvalue}} ->
			  {end_block,
			   merge_msg_ResponseEndBlock(OPFvalue, ONFvalue,
						      TrUserData)};
		      {_, undefined} -> PFvalue;
		      _ -> NFvalue
		    end}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'RequestInfo'{} ->
	  v_msg_RequestInfo(Msg, ['RequestInfo'], TrUserData);
      #'ResponseInitChain'{} ->
	  v_msg_ResponseInitChain(Msg, ['ResponseInitChain'],
				  TrUserData);
      #'PartSetHeader'{} ->
	  v_msg_PartSetHeader(Msg, ['PartSetHeader'], TrUserData);
      #'BlockID'{} ->
	  v_msg_BlockID(Msg, ['BlockID'], TrUserData);
      #'Header'{} ->
	  v_msg_Header(Msg, ['Header'], TrUserData);
      #'RequestBeginBlock'{} ->
	  v_msg_RequestBeginBlock(Msg, ['RequestBeginBlock'],
				  TrUserData);
      #'Validator'{} ->
	  v_msg_Validator(Msg, ['Validator'], TrUserData);
      #'ResponseEndBlock'{} ->
	  v_msg_ResponseEndBlock(Msg, ['ResponseEndBlock'],
				 TrUserData);
      #'RequestDeliverTx'{} ->
	  v_msg_RequestDeliverTx(Msg, ['RequestDeliverTx'],
				 TrUserData);
      #'RequestCheckTx'{} ->
	  v_msg_RequestCheckTx(Msg, ['RequestCheckTx'],
			       TrUserData);
      #'RequestCommit'{} ->
	  v_msg_RequestCommit(Msg, ['RequestCommit'], TrUserData);
      #'RequestEndBlock'{} ->
	  v_msg_RequestEndBlock(Msg, ['RequestEndBlock'],
				TrUserData);
      #'RequestInitChain'{} ->
	  v_msg_RequestInitChain(Msg, ['RequestInitChain'],
				 TrUserData);
      #'RequestQuery'{} ->
	  v_msg_RequestQuery(Msg, ['RequestQuery'], TrUserData);
      #'RequestSetOption'{} ->
	  v_msg_RequestSetOption(Msg, ['RequestSetOption'],
				 TrUserData);
      #'RequestFlush'{} ->
	  v_msg_RequestFlush(Msg, ['RequestFlush'], TrUserData);
      #'RequestEcho'{} ->
	  v_msg_RequestEcho(Msg, ['RequestEcho'], TrUserData);
      #'Request'{} ->
	  v_msg_Request(Msg, ['Request'], TrUserData);
      #'ResponseInfo'{} ->
	  v_msg_ResponseInfo(Msg, ['ResponseInfo'], TrUserData);
      #'ResponseSetOption'{} ->
	  v_msg_ResponseSetOption(Msg, ['ResponseSetOption'],
				  TrUserData);
      #'ResponseCheckTx'{} ->
	  v_msg_ResponseCheckTx(Msg, ['ResponseCheckTx'],
				TrUserData);
      #'ResponseDeliverTx'{} ->
	  v_msg_ResponseDeliverTx(Msg, ['ResponseDeliverTx'],
				  TrUserData);
      #'ResponseBeginBlock'{} ->
	  v_msg_ResponseBeginBlock(Msg, ['ResponseBeginBlock'],
				   TrUserData);
      #'ResponseQuery'{} ->
	  v_msg_ResponseQuery(Msg, ['ResponseQuery'], TrUserData);
      #'ResponseFlush'{} ->
	  v_msg_ResponseFlush(Msg, ['ResponseFlush'], TrUserData);
      #'ResponseCommit'{} ->
	  v_msg_ResponseCommit(Msg, ['ResponseCommit'],
			       TrUserData);
      #'ResponseEcho'{} ->
	  v_msg_ResponseEcho(Msg, ['ResponseEcho'], TrUserData);
      #'ResponseException'{} ->
	  v_msg_ResponseException(Msg, ['ResponseException'],
				  TrUserData);
      #'Response'{} ->
	  v_msg_Response(Msg, ['Response'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_RequestInfo/3}).
v_msg_RequestInfo(#'RequestInfo'{}, _Path, _) -> ok;
v_msg_RequestInfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RequestInfo'}, X, Path).

-dialyzer({nowarn_function,v_msg_ResponseInitChain/3}).
v_msg_ResponseInitChain(#'ResponseInitChain'{}, _Path,
			_) ->
    ok;
v_msg_ResponseInitChain(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ResponseInitChain'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_PartSetHeader/3}).
v_msg_PartSetHeader(#'PartSetHeader'{total = F1,
				     hash = F2},
		    Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [total | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [hash | Path])
    end,
    ok;
v_msg_PartSetHeader(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PartSetHeader'}, X, Path).

-dialyzer({nowarn_function,v_msg_BlockID/3}).
v_msg_BlockID(#'BlockID'{hash = F1, parts = F2}, Path,
	      TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [hash | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_PartSetHeader(F2, [parts | Path], TrUserData)
    end,
    ok;
v_msg_BlockID(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'BlockID'}, X, Path).

-dialyzer({nowarn_function,v_msg_Header/3}).
v_msg_Header(#'Header'{chain_id = F1, height = F2,
		       time = F3, num_txs = F4, last_block_id = F5,
		       last_commit_hash = F6, data_hash = F7,
		       validators_hash = F8, app_hash = F9},
	     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [chain_id | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [height | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [time | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint64(F4, [num_txs | Path])
    end,
    if F5 == undefined -> ok;
       true ->
	   v_msg_BlockID(F5, [last_block_id | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_bytes(F6, [last_commit_hash | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_bytes(F7, [data_hash | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_bytes(F8, [validators_hash | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_bytes(F9, [app_hash | Path])
    end,
    ok;
v_msg_Header(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Header'}, X, Path).

-dialyzer({nowarn_function,v_msg_RequestBeginBlock/3}).
v_msg_RequestBeginBlock(#'RequestBeginBlock'{hash = F1,
					     header = F2},
			Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [hash | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_msg_Header(F2, [header | Path], TrUserData)
    end,
    ok;
v_msg_RequestBeginBlock(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RequestBeginBlock'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_Validator/3}).
v_msg_Validator(#'Validator'{pubKey = F1, power = F2},
		Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [pubKey | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [power | Path])
    end,
    ok;
v_msg_Validator(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Validator'}, X, Path).

-dialyzer({nowarn_function,v_msg_ResponseEndBlock/3}).
v_msg_ResponseEndBlock(#'ResponseEndBlock'{diffs = F1},
		       Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_Validator(Elem, [diffs | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Validator'}}, F1,
			 Path)
    end,
    ok;
v_msg_ResponseEndBlock(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ResponseEndBlock'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_RequestDeliverTx/3}).
v_msg_RequestDeliverTx(#'RequestDeliverTx'{tx = F1},
		       Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [tx | Path])
    end,
    ok;
v_msg_RequestDeliverTx(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RequestDeliverTx'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_RequestCheckTx/3}).
v_msg_RequestCheckTx(#'RequestCheckTx'{tx = F1}, Path,
		     _) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [tx | Path])
    end,
    ok;
v_msg_RequestCheckTx(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RequestCheckTx'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_RequestCommit/3}).
v_msg_RequestCommit(#'RequestCommit'{}, _Path, _) -> ok;
v_msg_RequestCommit(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RequestCommit'}, X, Path).

-dialyzer({nowarn_function,v_msg_RequestEndBlock/3}).
v_msg_RequestEndBlock(#'RequestEndBlock'{height = F1},
		      Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [height | Path])
    end,
    ok;
v_msg_RequestEndBlock(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RequestEndBlock'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_RequestInitChain/3}).
v_msg_RequestInitChain(#'RequestInitChain'{validators =
					       F1},
		       Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_Validator(Elem, [validators | Path],
				TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Validator'}}, F1,
			 Path)
    end,
    ok;
v_msg_RequestInitChain(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RequestInitChain'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_RequestQuery/3}).
v_msg_RequestQuery(#'RequestQuery'{data = F1, path = F2,
				   height = F3, prove = F4},
		   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [data | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [path | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [height | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [prove | Path])
    end,
    ok;
v_msg_RequestQuery(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RequestQuery'}, X, Path).

-dialyzer({nowarn_function,v_msg_RequestSetOption/3}).
v_msg_RequestSetOption(#'RequestSetOption'{key = F1,
					   value = F2},
		       Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [key | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [value | Path])
    end,
    ok;
v_msg_RequestSetOption(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RequestSetOption'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_RequestFlush/3}).
v_msg_RequestFlush(#'RequestFlush'{}, _Path, _) -> ok;
v_msg_RequestFlush(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RequestFlush'}, X, Path).

-dialyzer({nowarn_function,v_msg_RequestEcho/3}).
v_msg_RequestEcho(#'RequestEcho'{message = F1}, Path,
		  _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [message | Path])
    end,
    ok;
v_msg_RequestEcho(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RequestEcho'}, X, Path).

-dialyzer({nowarn_function,v_msg_Request/3}).
v_msg_Request(#'Request'{value = F1}, Path,
	      TrUserData) ->
    case F1 of
      undefined -> ok;
      {echo, OF1} ->
	  v_msg_RequestEcho(OF1, [echo, value | Path],
			    TrUserData);
      {flush, OF1} ->
	  v_msg_RequestFlush(OF1, [flush, value | Path],
			     TrUserData);
      {info, OF1} ->
	  v_msg_RequestInfo(OF1, [info, value | Path],
			    TrUserData);
      {set_option, OF1} ->
	  v_msg_RequestSetOption(OF1, [set_option, value | Path],
				 TrUserData);
      {deliver_tx, OF1} ->
	  v_msg_RequestDeliverTx(OF1, [deliver_tx, value | Path],
				 TrUserData);
      {check_tx, OF1} ->
	  v_msg_RequestCheckTx(OF1, [check_tx, value | Path],
			       TrUserData);
      {commit, OF1} ->
	  v_msg_RequestCommit(OF1, [commit, value | Path],
			      TrUserData);
      {query, OF1} ->
	  v_msg_RequestQuery(OF1, [query, value | Path],
			     TrUserData);
      {init_chain, OF1} ->
	  v_msg_RequestInitChain(OF1, [init_chain, value | Path],
				 TrUserData);
      {begin_block, OF1} ->
	  v_msg_RequestBeginBlock(OF1,
				  [begin_block, value | Path], TrUserData);
      {end_block, OF1} ->
	  v_msg_RequestEndBlock(OF1, [end_block, value | Path],
				TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [value | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_ResponseInfo/3}).
v_msg_ResponseInfo(#'ResponseInfo'{data = F1,
				   version = F2, last_block_height = F3,
				   last_block_app_hash = F4},
		   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [data | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [version | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [last_block_height | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [last_block_app_hash | Path])
    end,
    ok;
v_msg_ResponseInfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ResponseInfo'}, X, Path).

-dialyzer({nowarn_function,v_msg_ResponseSetOption/3}).
v_msg_ResponseSetOption(#'ResponseSetOption'{log = F1},
			Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [log | Path])
    end,
    ok;
v_msg_ResponseSetOption(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ResponseSetOption'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_ResponseCheckTx/3}).
v_msg_ResponseCheckTx(#'ResponseCheckTx'{code = F1,
					 data = F2, log = F3},
		      Path, _) ->
    if F1 == undefined -> ok;
       true -> v_enum_CodeType(F1, [code | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [data | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [log | Path])
    end,
    ok;
v_msg_ResponseCheckTx(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ResponseCheckTx'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_ResponseDeliverTx/3}).
v_msg_ResponseDeliverTx(#'ResponseDeliverTx'{code = F1,
					     data = F2, log = F3},
			Path, _) ->
    if F1 == undefined -> ok;
       true -> v_enum_CodeType(F1, [code | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [data | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [log | Path])
    end,
    ok;
v_msg_ResponseDeliverTx(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ResponseDeliverTx'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_ResponseBeginBlock/3}).
v_msg_ResponseBeginBlock(#'ResponseBeginBlock'{}, _Path,
			 _) ->
    ok;
v_msg_ResponseBeginBlock(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ResponseBeginBlock'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_ResponseQuery/3}).
v_msg_ResponseQuery(#'ResponseQuery'{code = F1,
				     index = F2, key = F3, value = F4,
				     proof = F5, height = F6, log = F7},
		    Path, _) ->
    if F1 == undefined -> ok;
       true -> v_enum_CodeType(F1, [code | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [index | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [key | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [value | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bytes(F5, [proof | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint64(F6, [height | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [log | Path])
    end,
    ok;
v_msg_ResponseQuery(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ResponseQuery'}, X, Path).

-dialyzer({nowarn_function,v_msg_ResponseFlush/3}).
v_msg_ResponseFlush(#'ResponseFlush'{}, _Path, _) -> ok;
v_msg_ResponseFlush(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ResponseFlush'}, X, Path).

-dialyzer({nowarn_function,v_msg_ResponseCommit/3}).
v_msg_ResponseCommit(#'ResponseCommit'{code = F1,
				       data = F2, log = F3},
		     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_enum_CodeType(F1, [code | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [data | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [log | Path])
    end,
    ok;
v_msg_ResponseCommit(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ResponseCommit'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_ResponseEcho/3}).
v_msg_ResponseEcho(#'ResponseEcho'{message = F1}, Path,
		   _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [message | Path])
    end,
    ok;
v_msg_ResponseEcho(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ResponseEcho'}, X, Path).

-dialyzer({nowarn_function,v_msg_ResponseException/3}).
v_msg_ResponseException(#'ResponseException'{error =
						 F1},
			Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [error | Path])
    end,
    ok;
v_msg_ResponseException(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ResponseException'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_Response/3}).
v_msg_Response(#'Response'{value = F1}, Path,
	       TrUserData) ->
    case F1 of
      undefined -> ok;
      {exception, OF1} ->
	  v_msg_ResponseException(OF1, [exception, value | Path],
				  TrUserData);
      {echo, OF1} ->
	  v_msg_ResponseEcho(OF1, [echo, value | Path],
			     TrUserData);
      {flush, OF1} ->
	  v_msg_ResponseFlush(OF1, [flush, value | Path],
			      TrUserData);
      {info, OF1} ->
	  v_msg_ResponseInfo(OF1, [info, value | Path],
			     TrUserData);
      {set_option, OF1} ->
	  v_msg_ResponseSetOption(OF1, [set_option, value | Path],
				  TrUserData);
      {deliver_tx, OF1} ->
	  v_msg_ResponseDeliverTx(OF1, [deliver_tx, value | Path],
				  TrUserData);
      {check_tx, OF1} ->
	  v_msg_ResponseCheckTx(OF1, [check_tx, value | Path],
				TrUserData);
      {commit, OF1} ->
	  v_msg_ResponseCommit(OF1, [commit, value | Path],
			       TrUserData);
      {query, OF1} ->
	  v_msg_ResponseQuery(OF1, [query, value | Path],
			      TrUserData);
      {init_chain, OF1} ->
	  v_msg_ResponseInitChain(OF1, [init_chain, value | Path],
				  TrUserData);
      {begin_block, OF1} ->
	  v_msg_ResponseBeginBlock(OF1,
				   [begin_block, value | Path], TrUserData);
      {end_block, OF1} ->
	  v_msg_ResponseEndBlock(OF1, [end_block, value | Path],
				 TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [value | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_enum_CodeType/2}).
v_enum_CodeType('OK', _Path) -> ok;
v_enum_CodeType('InternalError', _Path) -> ok;
v_enum_CodeType('EncodingError', _Path) -> ok;
v_enum_CodeType('BadNonce', _Path) -> ok;
v_enum_CodeType('Unauthorized', _Path) -> ok;
v_enum_CodeType('InsufficientFunds', _Path) -> ok;
v_enum_CodeType('UnknownRequest', _Path) -> ok;
v_enum_CodeType('BaseDuplicateAddress', _Path) -> ok;
v_enum_CodeType('BaseEncodingError', _Path) -> ok;
v_enum_CodeType('BaseInsufficientFees', _Path) -> ok;
v_enum_CodeType('BaseInsufficientFunds', _Path) -> ok;
v_enum_CodeType('BaseInsufficientGasPrice', _Path) ->
    ok;
v_enum_CodeType('BaseInvalidInput', _Path) -> ok;
v_enum_CodeType('BaseInvalidOutput', _Path) -> ok;
v_enum_CodeType('BaseInvalidPubKey', _Path) -> ok;
v_enum_CodeType('BaseInvalidSequence', _Path) -> ok;
v_enum_CodeType('BaseInvalidSignature', _Path) -> ok;
v_enum_CodeType('BaseUnknownAddress', _Path) -> ok;
v_enum_CodeType('BaseUnknownPubKey', _Path) -> ok;
v_enum_CodeType('BaseUnknownPlugin', _Path) -> ok;
v_enum_CodeType('GovUnknownEntity', _Path) -> ok;
v_enum_CodeType('GovUnknownGroup', _Path) -> ok;
v_enum_CodeType('GovUnknownProposal', _Path) -> ok;
v_enum_CodeType('GovDuplicateGroup', _Path) -> ok;
v_enum_CodeType('GovDuplicateMember', _Path) -> ok;
v_enum_CodeType('GovDuplicateProposal', _Path) -> ok;
v_enum_CodeType('GovDuplicateVote', _Path) -> ok;
v_enum_CodeType('GovInvalidMember', _Path) -> ok;
v_enum_CodeType('GovInvalidVote', _Path) -> ok;
v_enum_CodeType('GovInvalidVotingPower', _Path) -> ok;
v_enum_CodeType(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_CodeType(X, Path) ->
    mk_type_error({invalid_enum, 'CodeType'}, X, Path).

-dialyzer({nowarn_function,v_type_sint32/2}).
v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_int64/2}).
v_type_int64(N, _Path)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-dialyzer({nowarn_function,v_type_uint64/2}).
v_type_uint64(N, _Path)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-dialyzer({nowarn_function,v_type_bool/2}).
v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(0, _Path) -> ok;
v_type_bool(1, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-dialyzer({nowarn_function,v_type_bytes/2}).
v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.



get_msg_defs() ->
    [{{enum, 'MessageType'},
      [{'NullMessage', 0}, {'Echo', 1}, {'Flush', 2},
       {'Info', 3}, {'SetOption', 4}, {'Exception', 5},
       {'DeliverTx', 17}, {'CheckTx', 18}, {'Commit', 19},
       {'Query', 20}, {'InitChain', 21}, {'BeginBlock', 22},
       {'EndBlock', 23}]},
     {{enum, 'CodeType'},
      [{'OK', 0}, {'InternalError', 1}, {'EncodingError', 2},
       {'BadNonce', 3}, {'Unauthorized', 4},
       {'InsufficientFunds', 5}, {'UnknownRequest', 6},
       {'BaseDuplicateAddress', 101},
       {'BaseEncodingError', 102},
       {'BaseInsufficientFees', 103},
       {'BaseInsufficientFunds', 104},
       {'BaseInsufficientGasPrice', 105},
       {'BaseInvalidInput', 106}, {'BaseInvalidOutput', 107},
       {'BaseInvalidPubKey', 108},
       {'BaseInvalidSequence', 109},
       {'BaseInvalidSignature', 110},
       {'BaseUnknownAddress', 111}, {'BaseUnknownPubKey', 112},
       {'BaseUnknownPlugin', 113}, {'GovUnknownEntity', 201},
       {'GovUnknownGroup', 202}, {'GovUnknownProposal', 203},
       {'GovDuplicateGroup', 204}, {'GovDuplicateMember', 205},
       {'GovDuplicateProposal', 206},
       {'GovDuplicateVote', 207}, {'GovInvalidMember', 208},
       {'GovInvalidVote', 209},
       {'GovInvalidVotingPower', 210}]},
     {{msg, 'RequestInfo'}, []},
     {{msg, 'ResponseInitChain'}, []},
     {{msg, 'PartSetHeader'},
      [#field{name = total, fnum = 1, rnum = 2, type = uint64,
	      occurrence = optional, opts = []},
       #field{name = hash, fnum = 2, rnum = 3, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, 'BlockID'},
      [#field{name = hash, fnum = 1, rnum = 2, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = parts, fnum = 2, rnum = 3,
	      type = {msg, 'PartSetHeader'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'Header'},
      [#field{name = chain_id, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = height, fnum = 2, rnum = 3, type = uint64,
	      occurrence = optional, opts = []},
       #field{name = time, fnum = 3, rnum = 4, type = uint64,
	      occurrence = optional, opts = []},
       #field{name = num_txs, fnum = 4, rnum = 5,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = last_block_id, fnum = 5, rnum = 6,
	      type = {msg, 'BlockID'}, occurrence = optional,
	      opts = []},
       #field{name = last_commit_hash, fnum = 6, rnum = 7,
	      type = bytes, occurrence = optional, opts = []},
       #field{name = data_hash, fnum = 7, rnum = 8,
	      type = bytes, occurrence = optional, opts = []},
       #field{name = validators_hash, fnum = 8, rnum = 9,
	      type = bytes, occurrence = optional, opts = []},
       #field{name = app_hash, fnum = 9, rnum = 10,
	      type = bytes, occurrence = optional, opts = []}]},
     {{msg, 'RequestBeginBlock'},
      [#field{name = hash, fnum = 1, rnum = 2, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = header, fnum = 2, rnum = 3,
	      type = {msg, 'Header'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'Validator'},
      [#field{name = pubKey, fnum = 1, rnum = 2, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = power, fnum = 2, rnum = 3, type = uint64,
	      occurrence = optional, opts = []}]},
     {{msg, 'ResponseEndBlock'},
      [#field{name = diffs, fnum = 1, rnum = 2,
	      type = {msg, 'Validator'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'RequestDeliverTx'},
      [#field{name = tx, fnum = 1, rnum = 2, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, 'RequestCheckTx'},
      [#field{name = tx, fnum = 1, rnum = 2, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, 'RequestCommit'}, []},
     {{msg, 'RequestEndBlock'},
      [#field{name = height, fnum = 1, rnum = 2,
	      type = uint64, occurrence = optional, opts = []}]},
     {{msg, 'RequestInitChain'},
      [#field{name = validators, fnum = 1, rnum = 2,
	      type = {msg, 'Validator'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'RequestQuery'},
      [#field{name = data, fnum = 1, rnum = 2, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = path, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = height, fnum = 3, rnum = 4, type = uint64,
	      occurrence = optional, opts = []},
       #field{name = prove, fnum = 4, rnum = 5, type = bool,
	      occurrence = optional, opts = []}]},
     {{msg, 'RequestSetOption'},
      [#field{name = key, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'RequestFlush'}, []},
     {{msg, 'RequestEcho'},
      [#field{name = message, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'Request'},
      [#gpb_oneof{name = value, rnum = 2,
		  fields =
		      [#field{name = echo, fnum = 1, rnum = 2,
			      type = {msg, 'RequestEcho'},
			      occurrence = optional, opts = []},
		       #field{name = flush, fnum = 2, rnum = 2,
			      type = {msg, 'RequestFlush'},
			      occurrence = optional, opts = []},
		       #field{name = info, fnum = 3, rnum = 2,
			      type = {msg, 'RequestInfo'},
			      occurrence = optional, opts = []},
		       #field{name = set_option, fnum = 4, rnum = 2,
			      type = {msg, 'RequestSetOption'},
			      occurrence = optional, opts = []},
		       #field{name = deliver_tx, fnum = 5, rnum = 2,
			      type = {msg, 'RequestDeliverTx'},
			      occurrence = optional, opts = []},
		       #field{name = check_tx, fnum = 6, rnum = 2,
			      type = {msg, 'RequestCheckTx'},
			      occurrence = optional, opts = []},
		       #field{name = commit, fnum = 7, rnum = 2,
			      type = {msg, 'RequestCommit'},
			      occurrence = optional, opts = []},
		       #field{name = query, fnum = 8, rnum = 2,
			      type = {msg, 'RequestQuery'},
			      occurrence = optional, opts = []},
		       #field{name = init_chain, fnum = 9, rnum = 2,
			      type = {msg, 'RequestInitChain'},
			      occurrence = optional, opts = []},
		       #field{name = begin_block, fnum = 10, rnum = 2,
			      type = {msg, 'RequestBeginBlock'},
			      occurrence = optional, opts = []},
		       #field{name = end_block, fnum = 11, rnum = 2,
			      type = {msg, 'RequestEndBlock'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'ResponseInfo'},
      [#field{name = data, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = version, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = last_block_height, fnum = 3, rnum = 4,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = last_block_app_hash, fnum = 4, rnum = 5,
	      type = bytes, occurrence = optional, opts = []}]},
     {{msg, 'ResponseSetOption'},
      [#field{name = log, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'ResponseCheckTx'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'CodeType'}, occurrence = optional,
	      opts = []},
       #field{name = data, fnum = 2, rnum = 3, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = log, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'ResponseDeliverTx'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'CodeType'}, occurrence = optional,
	      opts = []},
       #field{name = data, fnum = 2, rnum = 3, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = log, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'ResponseBeginBlock'}, []},
     {{msg, 'ResponseQuery'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'CodeType'}, occurrence = optional,
	      opts = []},
       #field{name = index, fnum = 2, rnum = 3, type = int64,
	      occurrence = optional, opts = []},
       #field{name = key, fnum = 3, rnum = 4, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = value, fnum = 4, rnum = 5, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = proof, fnum = 5, rnum = 6, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = height, fnum = 6, rnum = 7, type = uint64,
	      occurrence = optional, opts = []},
       #field{name = log, fnum = 7, rnum = 8, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'ResponseFlush'}, []},
     {{msg, 'ResponseCommit'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'CodeType'}, occurrence = optional,
	      opts = []},
       #field{name = data, fnum = 2, rnum = 3, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = log, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'ResponseEcho'},
      [#field{name = message, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'ResponseException'},
      [#field{name = error, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'Response'},
      [#gpb_oneof{name = value, rnum = 2,
		  fields =
		      [#field{name = exception, fnum = 1, rnum = 2,
			      type = {msg, 'ResponseException'},
			      occurrence = optional, opts = []},
		       #field{name = echo, fnum = 2, rnum = 2,
			      type = {msg, 'ResponseEcho'},
			      occurrence = optional, opts = []},
		       #field{name = flush, fnum = 3, rnum = 2,
			      type = {msg, 'ResponseFlush'},
			      occurrence = optional, opts = []},
		       #field{name = info, fnum = 4, rnum = 2,
			      type = {msg, 'ResponseInfo'},
			      occurrence = optional, opts = []},
		       #field{name = set_option, fnum = 5, rnum = 2,
			      type = {msg, 'ResponseSetOption'},
			      occurrence = optional, opts = []},
		       #field{name = deliver_tx, fnum = 6, rnum = 2,
			      type = {msg, 'ResponseDeliverTx'},
			      occurrence = optional, opts = []},
		       #field{name = check_tx, fnum = 7, rnum = 2,
			      type = {msg, 'ResponseCheckTx'},
			      occurrence = optional, opts = []},
		       #field{name = commit, fnum = 8, rnum = 2,
			      type = {msg, 'ResponseCommit'},
			      occurrence = optional, opts = []},
		       #field{name = query, fnum = 9, rnum = 2,
			      type = {msg, 'ResponseQuery'},
			      occurrence = optional, opts = []},
		       #field{name = init_chain, fnum = 10, rnum = 2,
			      type = {msg, 'ResponseInitChain'},
			      occurrence = optional, opts = []},
		       #field{name = begin_block, fnum = 11, rnum = 2,
			      type = {msg, 'ResponseBeginBlock'},
			      occurrence = optional, opts = []},
		       #field{name = end_block, fnum = 12, rnum = 2,
			      type = {msg, 'ResponseEndBlock'},
			      occurrence = optional, opts = []}]}]}].


get_msg_names() ->
    ['RequestInfo', 'ResponseInitChain', 'PartSetHeader',
     'BlockID', 'Header', 'RequestBeginBlock', 'Validator',
     'ResponseEndBlock', 'RequestDeliverTx',
     'RequestCheckTx', 'RequestCommit', 'RequestEndBlock',
     'RequestInitChain', 'RequestQuery', 'RequestSetOption',
     'RequestFlush', 'RequestEcho', 'Request',
     'ResponseInfo', 'ResponseSetOption', 'ResponseCheckTx',
     'ResponseDeliverTx', 'ResponseBeginBlock',
     'ResponseQuery', 'ResponseFlush', 'ResponseCommit',
     'ResponseEcho', 'ResponseException', 'Response'].


get_enum_names() -> ['MessageType', 'CodeType'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('RequestInfo') -> [];
find_msg_def('ResponseInitChain') -> [];
find_msg_def('PartSetHeader') ->
    [#field{name = total, fnum = 1, rnum = 2, type = uint64,
	    occurrence = optional, opts = []},
     #field{name = hash, fnum = 2, rnum = 3, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def('BlockID') ->
    [#field{name = hash, fnum = 1, rnum = 2, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = parts, fnum = 2, rnum = 3,
	    type = {msg, 'PartSetHeader'}, occurrence = optional,
	    opts = []}];
find_msg_def('Header') ->
    [#field{name = chain_id, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = height, fnum = 2, rnum = 3, type = uint64,
	    occurrence = optional, opts = []},
     #field{name = time, fnum = 3, rnum = 4, type = uint64,
	    occurrence = optional, opts = []},
     #field{name = num_txs, fnum = 4, rnum = 5,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = last_block_id, fnum = 5, rnum = 6,
	    type = {msg, 'BlockID'}, occurrence = optional,
	    opts = []},
     #field{name = last_commit_hash, fnum = 6, rnum = 7,
	    type = bytes, occurrence = optional, opts = []},
     #field{name = data_hash, fnum = 7, rnum = 8,
	    type = bytes, occurrence = optional, opts = []},
     #field{name = validators_hash, fnum = 8, rnum = 9,
	    type = bytes, occurrence = optional, opts = []},
     #field{name = app_hash, fnum = 9, rnum = 10,
	    type = bytes, occurrence = optional, opts = []}];
find_msg_def('RequestBeginBlock') ->
    [#field{name = hash, fnum = 1, rnum = 2, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = header, fnum = 2, rnum = 3,
	    type = {msg, 'Header'}, occurrence = optional,
	    opts = []}];
find_msg_def('Validator') ->
    [#field{name = pubKey, fnum = 1, rnum = 2, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = power, fnum = 2, rnum = 3, type = uint64,
	    occurrence = optional, opts = []}];
find_msg_def('ResponseEndBlock') ->
    [#field{name = diffs, fnum = 1, rnum = 2,
	    type = {msg, 'Validator'}, occurrence = repeated,
	    opts = []}];
find_msg_def('RequestDeliverTx') ->
    [#field{name = tx, fnum = 1, rnum = 2, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def('RequestCheckTx') ->
    [#field{name = tx, fnum = 1, rnum = 2, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def('RequestCommit') -> [];
find_msg_def('RequestEndBlock') ->
    [#field{name = height, fnum = 1, rnum = 2,
	    type = uint64, occurrence = optional, opts = []}];
find_msg_def('RequestInitChain') ->
    [#field{name = validators, fnum = 1, rnum = 2,
	    type = {msg, 'Validator'}, occurrence = repeated,
	    opts = []}];
find_msg_def('RequestQuery') ->
    [#field{name = data, fnum = 1, rnum = 2, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = path, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = height, fnum = 3, rnum = 4, type = uint64,
	    occurrence = optional, opts = []},
     #field{name = prove, fnum = 4, rnum = 5, type = bool,
	    occurrence = optional, opts = []}];
find_msg_def('RequestSetOption') ->
    [#field{name = key, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('RequestFlush') -> [];
find_msg_def('RequestEcho') ->
    [#field{name = message, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('Request') ->
    [#gpb_oneof{name = value, rnum = 2,
		fields =
		    [#field{name = echo, fnum = 1, rnum = 2,
			    type = {msg, 'RequestEcho'}, occurrence = optional,
			    opts = []},
		     #field{name = flush, fnum = 2, rnum = 2,
			    type = {msg, 'RequestFlush'}, occurrence = optional,
			    opts = []},
		     #field{name = info, fnum = 3, rnum = 2,
			    type = {msg, 'RequestInfo'}, occurrence = optional,
			    opts = []},
		     #field{name = set_option, fnum = 4, rnum = 2,
			    type = {msg, 'RequestSetOption'},
			    occurrence = optional, opts = []},
		     #field{name = deliver_tx, fnum = 5, rnum = 2,
			    type = {msg, 'RequestDeliverTx'},
			    occurrence = optional, opts = []},
		     #field{name = check_tx, fnum = 6, rnum = 2,
			    type = {msg, 'RequestCheckTx'},
			    occurrence = optional, opts = []},
		     #field{name = commit, fnum = 7, rnum = 2,
			    type = {msg, 'RequestCommit'},
			    occurrence = optional, opts = []},
		     #field{name = query, fnum = 8, rnum = 2,
			    type = {msg, 'RequestQuery'}, occurrence = optional,
			    opts = []},
		     #field{name = init_chain, fnum = 9, rnum = 2,
			    type = {msg, 'RequestInitChain'},
			    occurrence = optional, opts = []},
		     #field{name = begin_block, fnum = 10, rnum = 2,
			    type = {msg, 'RequestBeginBlock'},
			    occurrence = optional, opts = []},
		     #field{name = end_block, fnum = 11, rnum = 2,
			    type = {msg, 'RequestEndBlock'},
			    occurrence = optional, opts = []}]}];
find_msg_def('ResponseInfo') ->
    [#field{name = data, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = version, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = last_block_height, fnum = 3, rnum = 4,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = last_block_app_hash, fnum = 4, rnum = 5,
	    type = bytes, occurrence = optional, opts = []}];
find_msg_def('ResponseSetOption') ->
    [#field{name = log, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('ResponseCheckTx') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'CodeType'}, occurrence = optional,
	    opts = []},
     #field{name = data, fnum = 2, rnum = 3, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = log, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('ResponseDeliverTx') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'CodeType'}, occurrence = optional,
	    opts = []},
     #field{name = data, fnum = 2, rnum = 3, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = log, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('ResponseBeginBlock') -> [];
find_msg_def('ResponseQuery') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'CodeType'}, occurrence = optional,
	    opts = []},
     #field{name = index, fnum = 2, rnum = 3, type = int64,
	    occurrence = optional, opts = []},
     #field{name = key, fnum = 3, rnum = 4, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = value, fnum = 4, rnum = 5, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = proof, fnum = 5, rnum = 6, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = height, fnum = 6, rnum = 7, type = uint64,
	    occurrence = optional, opts = []},
     #field{name = log, fnum = 7, rnum = 8, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('ResponseFlush') -> [];
find_msg_def('ResponseCommit') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'CodeType'}, occurrence = optional,
	    opts = []},
     #field{name = data, fnum = 2, rnum = 3, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = log, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('ResponseEcho') ->
    [#field{name = message, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('ResponseException') ->
    [#field{name = error, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('Response') ->
    [#gpb_oneof{name = value, rnum = 2,
		fields =
		    [#field{name = exception, fnum = 1, rnum = 2,
			    type = {msg, 'ResponseException'},
			    occurrence = optional, opts = []},
		     #field{name = echo, fnum = 2, rnum = 2,
			    type = {msg, 'ResponseEcho'}, occurrence = optional,
			    opts = []},
		     #field{name = flush, fnum = 3, rnum = 2,
			    type = {msg, 'ResponseFlush'},
			    occurrence = optional, opts = []},
		     #field{name = info, fnum = 4, rnum = 2,
			    type = {msg, 'ResponseInfo'}, occurrence = optional,
			    opts = []},
		     #field{name = set_option, fnum = 5, rnum = 2,
			    type = {msg, 'ResponseSetOption'},
			    occurrence = optional, opts = []},
		     #field{name = deliver_tx, fnum = 6, rnum = 2,
			    type = {msg, 'ResponseDeliverTx'},
			    occurrence = optional, opts = []},
		     #field{name = check_tx, fnum = 7, rnum = 2,
			    type = {msg, 'ResponseCheckTx'},
			    occurrence = optional, opts = []},
		     #field{name = commit, fnum = 8, rnum = 2,
			    type = {msg, 'ResponseCommit'},
			    occurrence = optional, opts = []},
		     #field{name = query, fnum = 9, rnum = 2,
			    type = {msg, 'ResponseQuery'},
			    occurrence = optional, opts = []},
		     #field{name = init_chain, fnum = 10, rnum = 2,
			    type = {msg, 'ResponseInitChain'},
			    occurrence = optional, opts = []},
		     #field{name = begin_block, fnum = 11, rnum = 2,
			    type = {msg, 'ResponseBeginBlock'},
			    occurrence = optional, opts = []},
		     #field{name = end_block, fnum = 12, rnum = 2,
			    type = {msg, 'ResponseEndBlock'},
			    occurrence = optional, opts = []}]}];
find_msg_def(_) -> error.


find_enum_def('MessageType') ->
    [{'NullMessage', 0}, {'Echo', 1}, {'Flush', 2},
     {'Info', 3}, {'SetOption', 4}, {'Exception', 5},
     {'DeliverTx', 17}, {'CheckTx', 18}, {'Commit', 19},
     {'Query', 20}, {'InitChain', 21}, {'BeginBlock', 22},
     {'EndBlock', 23}];
find_enum_def('CodeType') ->
    [{'OK', 0}, {'InternalError', 1}, {'EncodingError', 2},
     {'BadNonce', 3}, {'Unauthorized', 4},
     {'InsufficientFunds', 5}, {'UnknownRequest', 6},
     {'BaseDuplicateAddress', 101},
     {'BaseEncodingError', 102},
     {'BaseInsufficientFees', 103},
     {'BaseInsufficientFunds', 104},
     {'BaseInsufficientGasPrice', 105},
     {'BaseInvalidInput', 106}, {'BaseInvalidOutput', 107},
     {'BaseInvalidPubKey', 108},
     {'BaseInvalidSequence', 109},
     {'BaseInvalidSignature', 110},
     {'BaseUnknownAddress', 111}, {'BaseUnknownPubKey', 112},
     {'BaseUnknownPlugin', 113}, {'GovUnknownEntity', 201},
     {'GovUnknownGroup', 202}, {'GovUnknownProposal', 203},
     {'GovDuplicateGroup', 204}, {'GovDuplicateMember', 205},
     {'GovDuplicateProposal', 206},
     {'GovDuplicateVote', 207}, {'GovInvalidMember', 208},
     {'GovInvalidVote', 209},
     {'GovInvalidVotingPower', 210}];
find_enum_def(_) -> error.


enum_symbol_by_value('MessageType', Value) ->
    enum_symbol_by_value_MessageType(Value);
enum_symbol_by_value('CodeType', Value) ->
    enum_symbol_by_value_CodeType(Value).


enum_value_by_symbol('MessageType', Sym) ->
    enum_value_by_symbol_MessageType(Sym);
enum_value_by_symbol('CodeType', Sym) ->
    enum_value_by_symbol_CodeType(Sym).


enum_symbol_by_value_MessageType(0) -> 'NullMessage';
enum_symbol_by_value_MessageType(1) -> 'Echo';
enum_symbol_by_value_MessageType(2) -> 'Flush';
enum_symbol_by_value_MessageType(3) -> 'Info';
enum_symbol_by_value_MessageType(4) -> 'SetOption';
enum_symbol_by_value_MessageType(5) -> 'Exception';
enum_symbol_by_value_MessageType(17) -> 'DeliverTx';
enum_symbol_by_value_MessageType(18) -> 'CheckTx';
enum_symbol_by_value_MessageType(19) -> 'Commit';
enum_symbol_by_value_MessageType(20) -> 'Query';
enum_symbol_by_value_MessageType(21) -> 'InitChain';
enum_symbol_by_value_MessageType(22) -> 'BeginBlock';
enum_symbol_by_value_MessageType(23) -> 'EndBlock'.


enum_value_by_symbol_MessageType('NullMessage') -> 0;
enum_value_by_symbol_MessageType('Echo') -> 1;
enum_value_by_symbol_MessageType('Flush') -> 2;
enum_value_by_symbol_MessageType('Info') -> 3;
enum_value_by_symbol_MessageType('SetOption') -> 4;
enum_value_by_symbol_MessageType('Exception') -> 5;
enum_value_by_symbol_MessageType('DeliverTx') -> 17;
enum_value_by_symbol_MessageType('CheckTx') -> 18;
enum_value_by_symbol_MessageType('Commit') -> 19;
enum_value_by_symbol_MessageType('Query') -> 20;
enum_value_by_symbol_MessageType('InitChain') -> 21;
enum_value_by_symbol_MessageType('BeginBlock') -> 22;
enum_value_by_symbol_MessageType('EndBlock') -> 23.

enum_symbol_by_value_CodeType(0) -> 'OK';
enum_symbol_by_value_CodeType(1) -> 'InternalError';
enum_symbol_by_value_CodeType(2) -> 'EncodingError';
enum_symbol_by_value_CodeType(3) -> 'BadNonce';
enum_symbol_by_value_CodeType(4) -> 'Unauthorized';
enum_symbol_by_value_CodeType(5) -> 'InsufficientFunds';
enum_symbol_by_value_CodeType(6) -> 'UnknownRequest';
enum_symbol_by_value_CodeType(101) ->
    'BaseDuplicateAddress';
enum_symbol_by_value_CodeType(102) ->
    'BaseEncodingError';
enum_symbol_by_value_CodeType(103) ->
    'BaseInsufficientFees';
enum_symbol_by_value_CodeType(104) ->
    'BaseInsufficientFunds';
enum_symbol_by_value_CodeType(105) ->
    'BaseInsufficientGasPrice';
enum_symbol_by_value_CodeType(106) ->
    'BaseInvalidInput';
enum_symbol_by_value_CodeType(107) ->
    'BaseInvalidOutput';
enum_symbol_by_value_CodeType(108) ->
    'BaseInvalidPubKey';
enum_symbol_by_value_CodeType(109) ->
    'BaseInvalidSequence';
enum_symbol_by_value_CodeType(110) ->
    'BaseInvalidSignature';
enum_symbol_by_value_CodeType(111) ->
    'BaseUnknownAddress';
enum_symbol_by_value_CodeType(112) ->
    'BaseUnknownPubKey';
enum_symbol_by_value_CodeType(113) ->
    'BaseUnknownPlugin';
enum_symbol_by_value_CodeType(201) ->
    'GovUnknownEntity';
enum_symbol_by_value_CodeType(202) -> 'GovUnknownGroup';
enum_symbol_by_value_CodeType(203) ->
    'GovUnknownProposal';
enum_symbol_by_value_CodeType(204) ->
    'GovDuplicateGroup';
enum_symbol_by_value_CodeType(205) ->
    'GovDuplicateMember';
enum_symbol_by_value_CodeType(206) ->
    'GovDuplicateProposal';
enum_symbol_by_value_CodeType(207) ->
    'GovDuplicateVote';
enum_symbol_by_value_CodeType(208) ->
    'GovInvalidMember';
enum_symbol_by_value_CodeType(209) -> 'GovInvalidVote';
enum_symbol_by_value_CodeType(210) ->
    'GovInvalidVotingPower'.


enum_value_by_symbol_CodeType('OK') -> 0;
enum_value_by_symbol_CodeType('InternalError') -> 1;
enum_value_by_symbol_CodeType('EncodingError') -> 2;
enum_value_by_symbol_CodeType('BadNonce') -> 3;
enum_value_by_symbol_CodeType('Unauthorized') -> 4;
enum_value_by_symbol_CodeType('InsufficientFunds') -> 5;
enum_value_by_symbol_CodeType('UnknownRequest') -> 6;
enum_value_by_symbol_CodeType('BaseDuplicateAddress') ->
    101;
enum_value_by_symbol_CodeType('BaseEncodingError') ->
    102;
enum_value_by_symbol_CodeType('BaseInsufficientFees') ->
    103;
enum_value_by_symbol_CodeType('BaseInsufficientFunds') ->
    104;
enum_value_by_symbol_CodeType('BaseInsufficientGasPrice') ->
    105;
enum_value_by_symbol_CodeType('BaseInvalidInput') ->
    106;
enum_value_by_symbol_CodeType('BaseInvalidOutput') ->
    107;
enum_value_by_symbol_CodeType('BaseInvalidPubKey') ->
    108;
enum_value_by_symbol_CodeType('BaseInvalidSequence') ->
    109;
enum_value_by_symbol_CodeType('BaseInvalidSignature') ->
    110;
enum_value_by_symbol_CodeType('BaseUnknownAddress') ->
    111;
enum_value_by_symbol_CodeType('BaseUnknownPubKey') ->
    112;
enum_value_by_symbol_CodeType('BaseUnknownPlugin') ->
    113;
enum_value_by_symbol_CodeType('GovUnknownEntity') ->
    201;
enum_value_by_symbol_CodeType('GovUnknownGroup') -> 202;
enum_value_by_symbol_CodeType('GovUnknownProposal') ->
    203;
enum_value_by_symbol_CodeType('GovDuplicateGroup') ->
    204;
enum_value_by_symbol_CodeType('GovDuplicateMember') ->
    205;
enum_value_by_symbol_CodeType('GovDuplicateProposal') ->
    206;
enum_value_by_symbol_CodeType('GovDuplicateVote') ->
    207;
enum_value_by_symbol_CodeType('GovInvalidMember') ->
    208;
enum_value_by_symbol_CodeType('GovInvalidVote') -> 209;
enum_value_by_symbol_CodeType('GovInvalidVotingPower') ->
    210.


get_service_names() -> ['ABCIApplication'].


get_service_def('ABCIApplication') ->
    {{service, 'ABCIApplication'},
     [#rpc{name = 'Echo', input = 'RequestEcho',
	   output = 'ResponseEcho', input_stream = false,
	   output_stream = false, opts = []},
      #rpc{name = 'Flush', input = 'RequestFlush',
	   output = 'ResponseFlush', input_stream = false,
	   output_stream = false, opts = []},
      #rpc{name = 'Info', input = 'RequestInfo',
	   output = 'ResponseInfo', input_stream = false,
	   output_stream = false, opts = []},
      #rpc{name = 'SetOption', input = 'RequestSetOption',
	   output = 'ResponseSetOption', input_stream = false,
	   output_stream = false, opts = []},
      #rpc{name = 'DeliverTx', input = 'RequestDeliverTx',
	   output = 'ResponseDeliverTx', input_stream = false,
	   output_stream = false, opts = []},
      #rpc{name = 'CheckTx', input = 'RequestCheckTx',
	   output = 'ResponseCheckTx', input_stream = false,
	   output_stream = false, opts = []},
      #rpc{name = 'Query', input = 'RequestQuery',
	   output = 'ResponseQuery', input_stream = false,
	   output_stream = false, opts = []},
      #rpc{name = 'Commit', input = 'RequestCommit',
	   output = 'ResponseCommit', input_stream = false,
	   output_stream = false, opts = []},
      #rpc{name = 'InitChain', input = 'RequestInitChain',
	   output = 'ResponseInitChain', input_stream = false,
	   output_stream = false, opts = []},
      #rpc{name = 'BeginBlock', input = 'RequestBeginBlock',
	   output = 'ResponseBeginBlock', input_stream = false,
	   output_stream = false, opts = []},
      #rpc{name = 'EndBlock', input = 'RequestEndBlock',
	   output = 'ResponseEndBlock', input_stream = false,
	   output_stream = false, opts = []}]};
get_service_def(_) -> error.


get_rpc_names('ABCIApplication') ->
    ['Echo', 'Flush', 'Info', 'SetOption', 'DeliverTx',
     'CheckTx', 'Query', 'Commit', 'InitChain', 'BeginBlock',
     'EndBlock'];
get_rpc_names(_) -> error.


find_rpc_def('ABCIApplication', RpcName) ->
    find_rpc_def_ABCIApplication(RpcName);
find_rpc_def(_, _) -> error.


find_rpc_def_ABCIApplication('Echo') ->
    #rpc{name = 'Echo', input = 'RequestEcho',
	 output = 'ResponseEcho', input_stream = false,
	 output_stream = false, opts = []};
find_rpc_def_ABCIApplication('Flush') ->
    #rpc{name = 'Flush', input = 'RequestFlush',
	 output = 'ResponseFlush', input_stream = false,
	 output_stream = false, opts = []};
find_rpc_def_ABCIApplication('Info') ->
    #rpc{name = 'Info', input = 'RequestInfo',
	 output = 'ResponseInfo', input_stream = false,
	 output_stream = false, opts = []};
find_rpc_def_ABCIApplication('SetOption') ->
    #rpc{name = 'SetOption', input = 'RequestSetOption',
	 output = 'ResponseSetOption', input_stream = false,
	 output_stream = false, opts = []};
find_rpc_def_ABCIApplication('DeliverTx') ->
    #rpc{name = 'DeliverTx', input = 'RequestDeliverTx',
	 output = 'ResponseDeliverTx', input_stream = false,
	 output_stream = false, opts = []};
find_rpc_def_ABCIApplication('CheckTx') ->
    #rpc{name = 'CheckTx', input = 'RequestCheckTx',
	 output = 'ResponseCheckTx', input_stream = false,
	 output_stream = false, opts = []};
find_rpc_def_ABCIApplication('Query') ->
    #rpc{name = 'Query', input = 'RequestQuery',
	 output = 'ResponseQuery', input_stream = false,
	 output_stream = false, opts = []};
find_rpc_def_ABCIApplication('Commit') ->
    #rpc{name = 'Commit', input = 'RequestCommit',
	 output = 'ResponseCommit', input_stream = false,
	 output_stream = false, opts = []};
find_rpc_def_ABCIApplication('InitChain') ->
    #rpc{name = 'InitChain', input = 'RequestInitChain',
	 output = 'ResponseInitChain', input_stream = false,
	 output_stream = false, opts = []};
find_rpc_def_ABCIApplication('BeginBlock') ->
    #rpc{name = 'BeginBlock', input = 'RequestBeginBlock',
	 output = 'ResponseBeginBlock', input_stream = false,
	 output_stream = false, opts = []};
find_rpc_def_ABCIApplication('EndBlock') ->
    #rpc{name = 'EndBlock', input = 'RequestEndBlock',
	 output = 'ResponseEndBlock', input_stream = false,
	 output_stream = false, opts = []};
find_rpc_def_ABCIApplication(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
      Def when is_tuple(Def) -> Def;
      error ->
	  erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


get_package_name() -> types.



gpb_version_as_string() ->
    "3.26.8".

gpb_version_as_list() ->
    [3,26,8].
